
;;; All the macros and the scheme-object printing procedure
;;; are defined in compiler.s
%include "compiler.s"

section .bss
malloc_pointer:
    resq 1

section .data
const_tbl:
MAKE_VOID
MAKE_NIL
MAKE_BOOL(0)
MAKE_BOOL(1)
MAKE_LITERAL_STRING 119,104,97,116,101,118,101,114
MAKE_LITERAL_SYMBOL( const_tbl + 6)
MAKE_LITERAL_INT(0)
MAKE_LITERAL_INT(1)
MAKE_LITERAL_STRING 116,104,105,115,32,115,104,111,117,108,100,32,98,101,32,97,110,32,101,114,114,111,114,44,32,98,117,116,32,121,111,117,32,100,111,110,39,116,32,115,117,112,112,111,114,116,32,101,120,99,101,112,116,105,111,110,115
MAKE_LITERAL_CHAR(0)
MAKE_LITERAL_STRING 102,105,110,105,115,104
MAKE_LITERAL_SYMBOL( const_tbl + 118)
MAKE_LITERAL_INT(1000)

;;; These macro definitions are required for the primitive
;;; definitions in the epilogue to work properly
%define SOB_VOID_ADDRESS const_tbl + 0
%define SOB_NIL_ADDRESS const_tbl + 1
%define SOB_FALSE_ADDRESS const_tbl + 2
%define SOB_TRUE_ADDRESS const_tbl + 4
%define sob_true SOB_TRUE_ADDRESS

fvar_tbl:
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED

global main
section .text
main:
    push rbp
    mov rbp, rsp
    ;; set up the heap
    mov rdi, GB(4)
    call malloc
    mov [malloc_pointer], rax

    ;; Set up the dummy activation frame
    ;; The dummy return address is T_UNDEFINED
    ;; (which a is a macro for 0) so that returning
    ;; from the top level (which SHOULD NOT HAPPEN
    ;; AND IS A BUG) will cause a segfault.
    push 0
    push qword SOB_NIL_ADDRESS
    push qword T_UNDEFINED
    push rsp
    mov rbp, rsp
    jmp code_fragment
  

code_fragment:
    ;; Set up the primitive stdlib fvars:
    ;; Since the primtive procedures are defined in assembly,
    ;; they are not generated by scheme (define ...) expressions.
    ;; This is where we emulate the missing (define ...) expressions
    ;; for all the primitive procedures.
        MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_boolean)
    mov [fvar_tbl + 0], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_float)
    mov [fvar_tbl + 200], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_integer)
    mov [fvar_tbl + 208], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_pair)
    mov [fvar_tbl + 136], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_null)
    mov [fvar_tbl + 72], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_char)
    mov [fvar_tbl + 344], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_vector)
    mov [fvar_tbl + 360], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_string)
    mov [fvar_tbl + 352], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_procedure)
    mov [fvar_tbl + 8], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_symbol)
    mov [fvar_tbl + 16], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_length)
    mov [fvar_tbl + 328], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_ref)
    mov [fvar_tbl + 336], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_set)
    mov [fvar_tbl + 24], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, make_string)
    mov [fvar_tbl + 160], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, vector_length)
    mov [fvar_tbl + 272], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, vector_ref)
    mov [fvar_tbl + 264], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, vector_set)
    mov [fvar_tbl + 240], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, make_vector)
    mov [fvar_tbl + 168], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, symbol_to_string)
    mov [fvar_tbl + 32], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, char_to_integer)
    mov [fvar_tbl + 368], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, integer_to_char)
    mov [fvar_tbl + 40], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_eq)
    mov [fvar_tbl + 184], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_add)
    mov [fvar_tbl + 152], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_mul)
    mov [fvar_tbl + 296], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_sub)
    mov [fvar_tbl + 280], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_div)
    mov [fvar_tbl + 304], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_lt)
    mov [fvar_tbl + 256], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_equ)
    mov [fvar_tbl + 112], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, l_car)
    mov [fvar_tbl + 80], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, l_cdr)
    mov [fvar_tbl + 88], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, set_car)
    mov [fvar_tbl + 48], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, set_cdr)
    mov [fvar_tbl + 56], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, l_cons)
    mov [fvar_tbl + 96], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, l_apply)
    mov [fvar_tbl + 224], rax

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 96] 
push rax 
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 4 
;------------- copy env 1 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 1 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend1
ploop1:
 cmp r11, 0
 je pend1
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop1
pend1:
;---------------- make closure 1 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode1)
jmp Lcont1
Lcode1:
 push rbp
 mov rbp, rsp
 ;------------- copy env 2 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 2 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend2
ploop2:
 cmp r11, 0
 je pend2
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop2
pend2:
;---------------- make closure 2 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode2)
jmp Lcont2
Lcode2:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8,  [rbp + 8*3]
 mov r15, [rbp + 8*3]
 mov r10, r8
 mov r11, 0
 sub r10, r11
 cmp r10, 0
 je end_opt2
mov qword [rbp + 8*3], 1
mov r9, [rbp + 8*(3+r8)]
MAKE_PAIR(r11 , r9 , SOB_NIL_ADDRESS)
dec r10
make_ls2:
 cmp r10, 0
 je end_make_ls2
 dec r8
 mov r9, [rbp + 8*(3+r8)]
 MAKE_PAIR(r12 , r9 , r11)
 mov r11, r12
 dec r10
 jmp make_ls2
 end_make_ls2:
mov [rbp + 8*(3 + 1)] , r11
mov r11, r15
sub r11,1
add rbp, 8*(5 +0  )
SHIFT_FRAME (4+1) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt2:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
mov rax , const_tbl + 1
push rax 
push 2 
push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 3 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 3 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend3
ploop3:
 cmp r11, 0
 je pend3
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop3
pend3:
;---------------- make closure 3 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode3)
jmp Lcont3
Lcode3:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 0)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 4 ----------------
COPY_ENV 32 , 4
mov r15, r14
;---------------- copy args 4 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend4
ploop4:
 cmp r11, 0
 je pend4
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop4
pend4:
;---------------- make closure 4 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode4)
jmp Lcont4
Lcode4:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next14
mov rax, SOB_FALSE_ADDRESS
ret
next14:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse1 
 mov rax, qword [rbp + 8 * (4 + 0)] 
jmp Lexit1 
 
                              Lelse1: 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 5 ----------------
COPY_ENV 40 , 5
mov r15, r14
;---------------- copy args 5 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend5
ploop5:
 cmp r11, 0
 je pend5
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop5
pend5:
;---------------- make closure 5 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode5)
jmp Lcont5
Lcode5:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 0)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 6 ----------------
COPY_ENV 48 , 6
mov r15, r14
;---------------- copy args 6 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend6
ploop6:
 cmp r11, 0
 je pend6
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop6
pend6:
;---------------- make closure 6 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode6)
jmp Lcont6
Lcode6:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*4] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next13
mov rax, SOB_FALSE_ADDRESS
ret
next13:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse2 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*4] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next11
mov rax, SOB_FALSE_ADDRESS
ret
next11:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*4] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next12
mov rax, SOB_FALSE_ADDRESS
ret
next12:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next10
mov rax, SOB_FALSE_ADDRESS
ret
t_next10:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit2 
 
                              Lelse2: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*4] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next8
mov rax, SOB_FALSE_ADDRESS
ret
next8:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next7
mov rax, SOB_FALSE_ADDRESS
ret
next7:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*4] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next9
mov rax, SOB_FALSE_ADDRESS
ret
next9:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*4] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next6
mov rax, SOB_FALSE_ADDRESS
ret
t_next6:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit2: 

 leave
 ret
Lcont6:
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
pop qword [rax] 
mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
mov rax, qword [rax] 

 leave
 ret
Lcont5:
mov sil, [rax]
cmp sil, T_CLOSURE
je next5
mov rax, SOB_FALSE_ADDRESS
ret
next5:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next4
mov rax, SOB_FALSE_ADDRESS
ret
t_next4:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit1: 

 leave
 ret
Lcont4:
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
pop qword [rax] 
mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
mov rax, qword [rax] 

 leave
 ret
Lcont3:
mov sil, [rax]
cmp sil, T_CLOSURE
je next3
mov rax, SOB_FALSE_ADDRESS
ret
next3:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next2
mov rax, SOB_FALSE_ADDRESS
ret
t_next2:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont2:

 leave
 ret
Lcont1:
mov sil, [rax]
cmp sil, T_CLOSURE
je next1
mov rax, SOB_FALSE_ADDRESS
ret
next1:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 64], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 112] 
push rax 
push 1 
;------------- copy env 7 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 7 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend7
ploop7:
 cmp r11, 0
 je pend7
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop7
pend7:
;---------------- make closure 7 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode7)
jmp Lcont7
Lcode7:
 push rbp
 mov rbp, rsp
 ;------------- copy env 8 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 8 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend8
ploop8:
 cmp r11, 0
 je pend8
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop8
pend8:
;---------------- make closure 8 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode8)
jmp Lcont8
Lcode8:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 32
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next16
mov rax, SOB_FALSE_ADDRESS
ret
t_next16:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont8:

 leave
 ret
Lcont7:
mov sil, [rax]
cmp sil, T_CLOSURE
je next15
mov rax, SOB_FALSE_ADDRESS
ret
next15:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 104], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

;------------- copy env 9 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 9 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend9
ploop9:
 cmp r11, 0
 je pend9
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop9
pend9:
;---------------- make closure 9 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode9)
jmp Lcont9
Lcode9:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8,  [rbp + 8*3]
 mov r15, [rbp + 8*3]
 mov r10, r8
 mov r11, 0
 sub r10, r11
 cmp r10, 0
 je end_opt9
mov qword [rbp + 8*3], 1
mov r9, [rbp + 8*(3+r8)]
MAKE_PAIR(r11 , r9 , SOB_NIL_ADDRESS)
dec r10
make_ls9:
 cmp r10, 0
 je end_make_ls9
 dec r8
 mov r9, [rbp + 8*(3+r8)]
 MAKE_PAIR(r12 , r9 , r11)
 mov r11, r12
 dec r10
 jmp make_ls9
 end_make_ls9:
mov [rbp + 8*(3 + 1)] , r11
mov r11, r15
sub r11,1
add rbp, 8*(5 +0  )
SHIFT_FRAME (4+1) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt9:
 mov rax, qword [rbp + 8 * (4 + 0)] 

 leave
 ret
Lcont9:
mov qword [fvar_tbl + 120], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 136] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 3 
;------------- copy env 10 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 10 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend10
ploop10:
 cmp r11, 0
 je pend10
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop10
pend10:
;---------------- make closure 10 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode10)
jmp Lcont10
Lcode10:
 push rbp
 mov rbp, rsp
 ;------------- copy env 11 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 11 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend11
ploop11:
 cmp r11, 0
 je pend11
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop11
pend11:
;---------------- make closure 11 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode11)
jmp Lcont11
Lcode11:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next21
mov rax, SOB_FALSE_ADDRESS
ret
next21:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
 jne orLexit3 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next20
mov rax, SOB_FALSE_ADDRESS
ret
next20:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse4 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next19
mov rax, SOB_FALSE_ADDRESS
ret
next19:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 1 
mov rax, qword [fvar_tbl + 128] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next18
mov rax, SOB_FALSE_ADDRESS
ret
t_next18:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit4 
 
                              Lelse4: 
mov rax , const_tbl + 2
Lexit4: 
orLexit3: 

 leave
 ret
Lcont11:

 leave
 ret
Lcont10:
mov sil, [rax]
cmp sil, T_CLOSURE
je next17
mov rax, SOB_FALSE_ADDRESS
ret
next17:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 128], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 152] 
push rax 
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 136] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 4 
;------------- copy env 12 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 12 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend12
ploop12:
 cmp r11, 0
 je pend12
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop12
pend12:
;---------------- make closure 12 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode12)
jmp Lcont12
Lcode12:
 push rbp
 mov rbp, rsp
 ;------------- copy env 13 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 13 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend13
ploop13:
 cmp r11, 0
 je pend13
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop13
pend13:
;---------------- make closure 13 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode13)
jmp Lcont13
Lcode13:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
mov rax , const_tbl + 23
push rax 
push 2 
;------------- copy env 14 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 14 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend14
ploop14:
 cmp r11, 0
 je pend14
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop14
pend14:
;---------------- make closure 14 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode14)
jmp Lcont14
Lcode14:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 1)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 1)] , rax 
mov rax, SOB_VOID_ADDRESS 
mov rax , const_tbl + 32
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 15 ----------------
COPY_ENV 32 , 4
mov r15, r14
;---------------- copy args 15 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend15
ploop15:
 cmp r11, 0
 je pend15
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop15
pend15:
;---------------- make closure 15 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode15)
jmp Lcont15
Lcode15:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next28
mov rax, SOB_FALSE_ADDRESS
ret
next28:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse5 
 mov rax, qword [rbp + 8 * (4 + 1)] 
jmp Lexit5 
 
                              Lelse5: 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next27
mov rax, SOB_FALSE_ADDRESS
ret
next27:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse6 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
mov rax , const_tbl + 41
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next25
mov rax, SOB_FALSE_ADDRESS
ret
next25:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next26
mov rax, SOB_FALSE_ADDRESS
ret
next26:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next24
mov rax, SOB_FALSE_ADDRESS
ret
t_next24:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit6 
 
                              Lelse6: 
mov rax , const_tbl + 50
Lexit6: 
Lexit5: 

 leave
 ret
Lcont15:
push rax 
mov rax, qword [rbp + 8 * (4 + 1)] 
pop qword [rax] 
mov rax, SOB_VOID_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 32
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
push rax 
push 2 
mov rax, qword [rbp + 8 * (4 + 1)] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next29
mov rax, SOB_FALSE_ADDRESS
ret
t_next29:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont14:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next23
mov rax, SOB_FALSE_ADDRESS
ret
t_next23:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont13:

 leave
 ret
Lcont12:
mov sil, [rax]
cmp sil, T_CLOSURE
je next22
mov rax, SOB_FALSE_ADDRESS
ret
next22:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 144], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 144] 
push rax 
mov rax, qword [fvar_tbl + 112] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 160] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 5 
;------------- copy env 16 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 16 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend16
ploop16:
 cmp r11, 0
 je pend16
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop16
pend16:
;---------------- make closure 16 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode16)
jmp Lcont16
Lcode16:
 push rbp
 mov rbp, rsp
 ;------------- copy env 17 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 17 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend17
ploop17:
 cmp r11, 0
 je pend17
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop17
pend17:
;---------------- make closure 17 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode17)
jmp Lcont17
Lcode17:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8,  [rbp + 8*3]
 mov r15, [rbp + 8*3]
 mov r10, r8
 mov r11, 1
 sub r10, r11
 cmp r10, 0
 je end_opt17
mov qword [rbp + 8*3], 2
mov r9, [rbp + 8*(3+r8)]
MAKE_PAIR(r11 , r9 , SOB_NIL_ADDRESS)
dec r10
make_ls17:
 cmp r10, 0
 je end_make_ls17
 dec r8
 mov r9, [rbp + 8*(3+r8)]
 MAKE_PAIR(r12 , r9 , r11)
 mov r11, r12
 dec r10
 jmp make_ls17
 end_make_ls17:
mov [rbp + 8*(3 + 2)] , r11
mov r11, r15
sub r11,2
add rbp, 8*(5 +1  )
SHIFT_FRAME (4+2) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt17:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next36
mov rax, SOB_FALSE_ADDRESS
ret
next36:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse7 
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 116
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next35
mov rax, SOB_FALSE_ADDRESS
ret
t_next35:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit7 
 
                              Lelse7: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next34
mov rax, SOB_FALSE_ADDRESS
ret
next34:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax , const_tbl + 41
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next33
mov rax, SOB_FALSE_ADDRESS
ret
next33:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse8 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next32
mov rax, SOB_FALSE_ADDRESS
ret
next32:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next31
mov rax, SOB_FALSE_ADDRESS
ret
t_next31:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit8 
 
                              Lelse8: 
mov rax , const_tbl + 50
Lexit8: 
Lexit7: 

 leave
 ret
Lcont17:

 leave
 ret
Lcont16:
mov sil, [rax]
cmp sil, T_CLOSURE
je next30
mov rax, SOB_FALSE_ADDRESS
ret
next30:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 160], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 72] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 168] 
push rax 
mov rax, qword [fvar_tbl + 144] 
push rax 
push 4 
;------------- copy env 18 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 18 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend18
ploop18:
 cmp r11, 0
 je pend18
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop18
pend18:
;---------------- make closure 18 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode18)
jmp Lcont18
Lcode18:
 push rbp
 mov rbp, rsp
 ;------------- copy env 19 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 19 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend19
ploop19:
 cmp r11, 0
 je pend19
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop19
pend19:
;---------------- make closure 19 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode19)
jmp Lcont19
Lcode19:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8,  [rbp + 8*3]
 mov r15, [rbp + 8*3]
 mov r10, r8
 mov r11, 1
 sub r10, r11
 cmp r10, 0
 je end_opt19
mov qword [rbp + 8*3], 2
mov r9, [rbp + 8*(3+r8)]
MAKE_PAIR(r11 , r9 , SOB_NIL_ADDRESS)
dec r10
make_ls19:
 cmp r10, 0
 je end_make_ls19
 dec r8
 mov r9, [rbp + 8*(3+r8)]
 MAKE_PAIR(r12 , r9 , r11)
 mov r11, r12
 dec r10
 jmp make_ls19
 end_make_ls19:
mov [rbp + 8*(3 + 2)] , r11
mov r11, r15
sub r11,2
add rbp, 8*(5 +1  )
SHIFT_FRAME (4+2) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt19:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next43
mov rax, SOB_FALSE_ADDRESS
ret
next43:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse9 
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 32
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next42
mov rax, SOB_FALSE_ADDRESS
ret
t_next42:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit9 
 
                              Lelse9: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next41
mov rax, SOB_FALSE_ADDRESS
ret
next41:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax , const_tbl + 41
push rax 
push 2 
mov rax, qword [fvar_tbl + 112] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next40
mov rax, SOB_FALSE_ADDRESS
ret
next40:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse10 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next39
mov rax, SOB_FALSE_ADDRESS
ret
next39:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next38
mov rax, SOB_FALSE_ADDRESS
ret
t_next38:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit10 
 
                              Lelse10: 
mov rax , const_tbl + 50
Lexit10: 
Lexit9: 

 leave
 ret
Lcont19:

 leave
 ret
Lcont18:
mov sil, [rax]
cmp sil, T_CLOSURE
je next37
mov rax, SOB_FALSE_ADDRESS
ret
next37:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 168], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 184] 
push rax 
push 1 
;------------- copy env 20 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 20 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend20
ploop20:
 cmp r11, 0
 je pend20
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop20
pend20:
;---------------- make closure 20 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode20)
jmp Lcont20
Lcode20:
 push rbp
 mov rbp, rsp
 ;------------- copy env 21 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 21 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend21
ploop21:
 cmp r11, 0
 je pend21
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop21
pend21:
;---------------- make closure 21 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode21)
jmp Lcont21
Lcode21:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 2
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next45
mov rax, SOB_FALSE_ADDRESS
ret
next45:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse11 
 mov rax , const_tbl + 4
jmp Lexit11 
 
                              Lelse11: 
mov rax , const_tbl + 2
Lexit11: 

 leave
 ret
Lcont21:

 leave
 ret
Lcont20:
mov sil, [rax]
cmp sil, T_CLOSURE
je next44
mov rax, SOB_FALSE_ADDRESS
ret
next44:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 176], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 208] 
push rax 
mov rax, qword [fvar_tbl + 200] 
push rax 
push 2 
;------------- copy env 22 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 22 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend22
ploop22:
 cmp r11, 0
 je pend22
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop22
pend22:
;---------------- make closure 22 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode22)
jmp Lcont22
Lcode22:
 push rbp
 mov rbp, rsp
 ;------------- copy env 23 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 23 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend23
ploop23:
 cmp r11, 0
 je pend23
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop23
pend23:
;---------------- make closure 23 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode23)
jmp Lcont23
Lcode23:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next48
mov rax, SOB_FALSE_ADDRESS
ret
next48:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
 jne orLexit12 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next47
mov rax, SOB_FALSE_ADDRESS
ret
t_next47:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
orLexit12: 

 leave
 ret
Lcont23:

 leave
 ret
Lcont22:
mov sil, [rax]
cmp sil, T_CLOSURE
je next46
mov rax, SOB_FALSE_ADDRESS
ret
next46:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 192], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 224] 
push rax 
mov rax, qword [fvar_tbl + 96] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 5 
;------------- copy env 24 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 24 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend24
ploop24:
 cmp r11, 0
 je pend24
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop24
pend24:
;---------------- make closure 24 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode24)
jmp Lcont24
Lcode24:
 push rbp
 mov rbp, rsp
 ;------------- copy env 25 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 25 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend25
ploop25:
 cmp r11, 0
 je pend25
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop25
pend25:
;---------------- make closure 25 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode25)
jmp Lcont25
Lcode25:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8,  [rbp + 8*3]
 mov r15, [rbp + 8*3]
 mov r10, r8
 mov r11, 2
 sub r10, r11
 cmp r10, 0
 je end_opt25
mov qword [rbp + 8*3], 3
mov r9, [rbp + 8*(3+r8)]
MAKE_PAIR(r11 , r9 , SOB_NIL_ADDRESS)
dec r10
make_ls25:
 cmp r10, 0
 je end_make_ls25
 dec r8
 mov r9, [rbp + 8*(3+r8)]
 MAKE_PAIR(r12 , r9 , r11)
 mov r11, r12
 dec r10
 jmp make_ls25
 end_make_ls25:
mov [rbp + 8*(3 + 3)] , r11
mov r11, r15
sub r11,3
add rbp, 8*(5 +2  )
SHIFT_FRAME (4+3) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt25:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 2)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next70
mov rax, SOB_FALSE_ADDRESS
ret
next70:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse13 
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
;------------- copy env 29 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 29 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend29
ploop29:
 cmp r11, 0
 je pend29
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop29
pend29:
;---------------- make closure 29 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode29)
jmp Lcont29
Lcode29:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 30 ----------------
COPY_ENV 32 , 4
mov r15, r14
;---------------- copy args 30 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend30
ploop30:
 cmp r11, 0
 je pend30
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop30
pend30:
;---------------- make closure 30 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode30)
jmp Lcont30
Lcode30:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 0)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 31 ----------------
COPY_ENV 40 , 5
mov r15, r14
;---------------- copy args 31 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend31
ploop31:
 cmp r11, 0
 je pend31
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop31
pend31:
;---------------- make closure 31 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode31)
jmp Lcont31
Lcode31:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*3] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next68
mov rax, SOB_FALSE_ADDRESS
ret
next68:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse15 
 mov rax , const_tbl + 1
jmp Lexit15 
 
                              Lelse15: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*3] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next65
mov rax, SOB_FALSE_ADDRESS
ret
next65:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next64
mov rax, SOB_FALSE_ADDRESS
ret
next64:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*3] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next67
mov rax, SOB_FALSE_ADDRESS
ret
next67:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next66
mov rax, SOB_FALSE_ADDRESS
ret
next66:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*3] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next63
mov rax, SOB_FALSE_ADDRESS
ret
t_next63:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit15: 

 leave
 ret
Lcont31:
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
pop qword [rax] 
mov rax, SOB_VOID_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
push rax 
push 1 
mov rax, qword [rbp + 8 * (4 + 0)] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next69
mov rax, SOB_FALSE_ADDRESS
ret
t_next69:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont30:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next62
mov rax, SOB_FALSE_ADDRESS
ret
t_next62:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont29:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next61
mov rax, SOB_FALSE_ADDRESS
ret
t_next61:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit13 
 
                              Lelse13: 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 2)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 2 
;------------- copy env 26 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 26 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend26
ploop26:
 cmp r11, 0
 je pend26
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop26
pend26:
;---------------- make closure 26 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode26)
jmp Lcont26
Lcode26:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 27 ----------------
COPY_ENV 32 , 4
mov r15, r14
;---------------- copy args 27 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend27
ploop27:
 cmp r11, 0
 je pend27
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop27
pend27:
;---------------- make closure 27 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode27)
jmp Lcont27
Lcode27:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 0)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 28 ----------------
COPY_ENV 40 , 5
mov r15, r14
;---------------- copy args 28 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend28
ploop28:
 cmp r11, 0
 je pend28
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop28
pend28:
;---------------- make closure 28 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode28)
jmp Lcont28
Lcode28:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*3] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next59
mov rax, SOB_FALSE_ADDRESS
ret
next59:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse14 
 mov rax , const_tbl + 1
jmp Lexit14 
 
                              Lelse14: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*3] 
mov rax, qword [rax + 8*4] 
push rax 
push 2 
mov rax, qword [fvar_tbl + 216] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next54
mov rax, SOB_FALSE_ADDRESS
ret
next54:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*3] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next55
mov rax, SOB_FALSE_ADDRESS
ret
next55:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next53
mov rax, SOB_FALSE_ADDRESS
ret
next53:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*3] 
mov rax, qword [rax + 8*3] 
push rax 
push 2 
mov rax, qword [fvar_tbl + 216] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next57
mov rax, SOB_FALSE_ADDRESS
ret
next57:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*3] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next58
mov rax, SOB_FALSE_ADDRESS
ret
next58:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*0] 
push rax 
push 3 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*3] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next56
mov rax, SOB_FALSE_ADDRESS
ret
next56:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*3] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next52
mov rax, SOB_FALSE_ADDRESS
ret
t_next52:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit14: 

 leave
 ret
Lcont28:
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
pop qword [rax] 
mov rax, SOB_VOID_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
push rax 
push 2 
mov rax, qword [rbp + 8 * (4 + 0)] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next60
mov rax, SOB_FALSE_ADDRESS
ret
t_next60:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont27:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next51
mov rax, SOB_FALSE_ADDRESS
ret
t_next51:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont26:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next50
mov rax, SOB_FALSE_ADDRESS
ret
t_next50:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit13: 

 leave
 ret
Lcont25:

 leave
 ret
Lcont24:
mov sil, [rax]
cmp sil, T_CLOSURE
je next49
mov rax, SOB_FALSE_ADDRESS
ret
next49:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 216], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 152] 
push rax 
mov rax, qword [fvar_tbl + 144] 
push rax 
mov rax, qword [fvar_tbl + 168] 
push rax 
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 136] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 7 
;------------- copy env 32 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 32 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend32
ploop32:
 cmp r11, 0
 je pend32
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop32
pend32:
;---------------- make closure 32 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode32)
jmp Lcont32
Lcode32:
 push rbp
 mov rbp, rsp
 ;------------- copy env 33 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 33 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend33
ploop33:
 cmp r11, 0
 je pend33
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop33
pend33:
;---------------- make closure 33 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode33)
jmp Lcont33
Lcode33:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 34 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 34 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend34
ploop34:
 cmp r11, 0
 je pend34
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop34
pend34:
;---------------- make closure 34 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode34)
jmp Lcont34
Lcode34:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 0)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 35 ----------------
COPY_ENV 32 , 4
mov r15, r14
;---------------- copy args 35 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend35
ploop35:
 cmp r11, 0
 je pend35
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop35
pend35:
;---------------- make closure 35 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode35)
jmp Lcont35
Lcode35:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next79
mov rax, SOB_FALSE_ADDRESS
ret
next79:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse16 
 mov rax, qword [rbp + 8 * (4 + 1)] 
jmp Lexit16 
 
                              Lelse16: 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next78
mov rax, SOB_FALSE_ADDRESS
ret
next78:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse17 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 2)] 
push rax 
mov rax , const_tbl + 41
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*6] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next74
mov rax, SOB_FALSE_ADDRESS
ret
next74:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next76
mov rax, SOB_FALSE_ADDRESS
ret
next76:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8 * (4 + 2)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 3 
mov rax, qword [fvar_tbl + 240] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next75
mov rax, SOB_FALSE_ADDRESS
ret
next75:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next77
mov rax, SOB_FALSE_ADDRESS
ret
next77:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 3 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next73
mov rax, SOB_FALSE_ADDRESS
ret
t_next73:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 3) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit17 
 
                              Lelse17: 
mov rax , const_tbl + 50
Lexit17: 
Lexit16: 

 leave
 ret
Lcont35:
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
pop qword [rax] 
mov rax, SOB_VOID_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 32
push rax 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*5] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next82
mov rax, SOB_FALSE_ADDRESS
ret
next82:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next81
mov rax, SOB_FALSE_ADDRESS
ret
next81:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
push rax 
push 3 
mov rax, qword [rbp + 8 * (4 + 0)] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next80
mov rax, SOB_FALSE_ADDRESS
ret
t_next80:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 3) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont34:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next72
mov rax, SOB_FALSE_ADDRESS
ret
t_next72:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont33:

 leave
 ret
Lcont32:
mov sil, [rax]
cmp sil, T_CLOSURE
je next71
mov rax, SOB_FALSE_ADDRESS
ret
next71:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 232], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 280] 
push rax 
mov rax, qword [fvar_tbl + 272] 
push rax 
mov rax, qword [fvar_tbl + 96] 
push rax 
mov rax, qword [fvar_tbl + 264] 
push rax 
mov rax, qword [fvar_tbl + 256] 
push rax 
push 5 
;------------- copy env 36 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 36 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend36
ploop36:
 cmp r11, 0
 je pend36
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop36
pend36:
;---------------- make closure 36 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode36)
jmp Lcont36
Lcode36:
 push rbp
 mov rbp, rsp
 ;------------- copy env 37 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 37 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend37
ploop37:
 cmp r11, 0
 je pend37
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop37
pend37:
;---------------- make closure 37 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode37)
jmp Lcont37
Lcode37:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 38 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 38 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend38
ploop38:
 cmp r11, 0
 je pend38
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop38
pend38:
;---------------- make closure 38 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode38)
jmp Lcont38
Lcode38:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 0)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 39 ----------------
COPY_ENV 32 , 4
mov r15, r14
;---------------- copy args 39 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend39
ploop39:
 cmp r11, 0
 je pend39
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop39
pend39:
;---------------- make closure 39 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode39)
jmp Lcont39
Lcode39:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 32
push rax 
mov rax, qword [rbp + 8 * (4 + 2)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next89
mov rax, SOB_FALSE_ADDRESS
ret
next89:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse18 
 mov rax, qword [rbp + 8 * (4 + 1)] 
jmp Lexit18 
 
                              Lelse18: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 41
push rax 
mov rax, qword [rbp + 8 * (4 + 2)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next86
mov rax, SOB_FALSE_ADDRESS
ret
next86:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 2)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next88
mov rax, SOB_FALSE_ADDRESS
ret
next88:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next87
mov rax, SOB_FALSE_ADDRESS
ret
next87:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 3 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next85
mov rax, SOB_FALSE_ADDRESS
ret
t_next85:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 3) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit18: 

 leave
 ret
Lcont39:
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
pop qword [rax] 
mov rax, SOB_VOID_ADDRESS
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 41
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next92
mov rax, SOB_FALSE_ADDRESS
ret
next92:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next91
mov rax, SOB_FALSE_ADDRESS
ret
next91:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax , const_tbl + 1
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
push rax 
push 3 
mov rax, qword [rbp + 8 * (4 + 0)] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next90
mov rax, SOB_FALSE_ADDRESS
ret
t_next90:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 3) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont38:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next84
mov rax, SOB_FALSE_ADDRESS
ret
t_next84:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont37:

 leave
 ret
Lcont36:
mov sil, [rax]
cmp sil, T_CLOSURE
je next83
mov rax, SOB_FALSE_ADDRESS
ret
next83:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 248], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 232] 
push rax 
push 1 
;------------- copy env 40 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 40 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend40
ploop40:
 cmp r11, 0
 je pend40
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop40
pend40:
;---------------- make closure 40 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode40)
jmp Lcont40
Lcode40:
 push rbp
 mov rbp, rsp
 ;------------- copy env 41 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 41 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend41
ploop41:
 cmp r11, 0
 je pend41
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop41
pend41:
;---------------- make closure 41 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode41)
jmp Lcont41
Lcode41:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8,  [rbp + 8*3]
 mov r15, [rbp + 8*3]
 mov r10, r8
 mov r11, 0
 sub r10, r11
 cmp r10, 0
 je end_opt41
mov qword [rbp + 8*3], 1
mov r9, [rbp + 8*(3+r8)]
MAKE_PAIR(r11 , r9 , SOB_NIL_ADDRESS)
dec r10
make_ls41:
 cmp r10, 0
 je end_make_ls41
 dec r8
 mov r9, [rbp + 8*(3+r8)]
 MAKE_PAIR(r12 , r9 , r11)
 mov r11, r12
 dec r10
 jmp make_ls41
 end_make_ls41:
mov [rbp + 8*(3 + 1)] , r11
mov r11, r15
sub r11,1
add rbp, 8*(5 +0  )
SHIFT_FRAME (4+1) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt41:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next94
mov rax, SOB_FALSE_ADDRESS
ret
t_next94:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont41:

 leave
 ret
Lcont40:
mov sil, [rax]
cmp sil, T_CLOSURE
je next93
mov rax, SOB_FALSE_ADDRESS
ret
next93:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 288], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 224] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 152] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 5 
;------------- copy env 42 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 42 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend42
ploop42:
 cmp r11, 0
 je pend42
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop42
pend42:
;---------------- make closure 42 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode42)
jmp Lcont42
Lcode42:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 43 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 43 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend43
ploop43:
 cmp r11, 0
 je pend43
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop43
pend43:
;---------------- make closure 43 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode43)
jmp Lcont43
Lcode43:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 0)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 44 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 44 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend44
ploop44:
 cmp r11, 0
 je pend44
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop44
pend44:
;---------------- make closure 44 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode44)
jmp Lcont44
Lcode44:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8,  [rbp + 8*3]
 mov r15, [rbp + 8*3]
 mov r10, r8
 mov r11, 0
 sub r10, r11
 cmp r10, 0
 je end_opt44
mov qword [rbp + 8*3], 1
mov r9, [rbp + 8*(3+r8)]
MAKE_PAIR(r11 , r9 , SOB_NIL_ADDRESS)
dec r10
make_ls44:
 cmp r10, 0
 je end_make_ls44
 dec r8
 mov r9, [rbp + 8*(3+r8)]
 MAKE_PAIR(r12 , r9 , r11)
 mov r11, r12
 dec r10
 jmp make_ls44
 end_make_ls44:
mov [rbp + 8*(3 + 1)] , r11
mov r11, r15
sub r11,1
add rbp, 8*(5 +0  )
SHIFT_FRAME (4+1) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt44:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next101
mov rax, SOB_FALSE_ADDRESS
ret
next101:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse19 
 mov rax , const_tbl + 32
jmp Lexit19 
 
                              Lelse19: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next99
mov rax, SOB_FALSE_ADDRESS
ret
next99:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next98
mov rax, SOB_FALSE_ADDRESS
ret
next98:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next100
mov rax, SOB_FALSE_ADDRESS
ret
next100:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next97
mov rax, SOB_FALSE_ADDRESS
ret
t_next97:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit19: 

 leave
 ret
Lcont44:
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
pop qword [rax] 
mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
mov rax, qword [rax] 

 leave
 ret
Lcont43:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next96
mov rax, SOB_FALSE_ADDRESS
ret
t_next96:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont42:
mov sil, [rax]
cmp sil, T_CLOSURE
je next95
mov rax, SOB_FALSE_ADDRESS
ret
next95:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 152], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 224] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 296] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 5 
;------------- copy env 45 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 45 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend45
ploop45:
 cmp r11, 0
 je pend45
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop45
pend45:
;---------------- make closure 45 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode45)
jmp Lcont45
Lcode45:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 46 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 46 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend46
ploop46:
 cmp r11, 0
 je pend46
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop46
pend46:
;---------------- make closure 46 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode46)
jmp Lcont46
Lcode46:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 0)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 47 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 47 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend47
ploop47:
 cmp r11, 0
 je pend47
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop47
pend47:
;---------------- make closure 47 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode47)
jmp Lcont47
Lcode47:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8,  [rbp + 8*3]
 mov r15, [rbp + 8*3]
 mov r10, r8
 mov r11, 0
 sub r10, r11
 cmp r10, 0
 je end_opt47
mov qword [rbp + 8*3], 1
mov r9, [rbp + 8*(3+r8)]
MAKE_PAIR(r11 , r9 , SOB_NIL_ADDRESS)
dec r10
make_ls47:
 cmp r10, 0
 je end_make_ls47
 dec r8
 mov r9, [rbp + 8*(3+r8)]
 MAKE_PAIR(r12 , r9 , r11)
 mov r11, r12
 dec r10
 jmp make_ls47
 end_make_ls47:
mov [rbp + 8*(3 + 1)] , r11
mov r11, r15
sub r11,1
add rbp, 8*(5 +0  )
SHIFT_FRAME (4+1) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt47:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next108
mov rax, SOB_FALSE_ADDRESS
ret
next108:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse20 
 mov rax , const_tbl + 41
jmp Lexit20 
 
                              Lelse20: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next106
mov rax, SOB_FALSE_ADDRESS
ret
next106:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next105
mov rax, SOB_FALSE_ADDRESS
ret
next105:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next107
mov rax, SOB_FALSE_ADDRESS
ret
next107:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next104
mov rax, SOB_FALSE_ADDRESS
ret
t_next104:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit20: 

 leave
 ret
Lcont47:
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
pop qword [rax] 
mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
mov rax, qword [rax] 

 leave
 ret
Lcont46:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next103
mov rax, SOB_FALSE_ADDRESS
ret
t_next103:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont45:
mov sil, [rax]
cmp sil, T_CLOSURE
je next102
mov rax, SOB_FALSE_ADDRESS
ret
next102:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 296], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 144] 
push rax 
mov rax, qword [fvar_tbl + 224] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 152] 
push rax 
mov rax, qword [fvar_tbl + 280] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 7 
;------------- copy env 48 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 48 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend48
ploop48:
 cmp r11, 0
 je pend48
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop48
pend48:
;---------------- make closure 48 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode48)
jmp Lcont48
Lcode48:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 49 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 49 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend49
ploop49:
 cmp r11, 0
 je pend49
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop49
pend49:
;---------------- make closure 49 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode49)
jmp Lcont49
Lcode49:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 0)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 50 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 50 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend50
ploop50:
 cmp r11, 0
 je pend50
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop50
pend50:
;---------------- make closure 50 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode50)
jmp Lcont50
Lcode50:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8,  [rbp + 8*3]
 mov r15, [rbp + 8*3]
 mov r10, r8
 mov r11, 0
 sub r10, r11
 cmp r10, 0
 je end_opt50
mov qword [rbp + 8*3], 1
mov r9, [rbp + 8*(3+r8)]
MAKE_PAIR(r11 , r9 , SOB_NIL_ADDRESS)
dec r10
make_ls50:
 cmp r10, 0
 je end_make_ls50
 dec r8
 mov r9, [rbp + 8*(3+r8)]
 MAKE_PAIR(r12 , r9 , r11)
 mov r11, r12
 dec r10
 jmp make_ls50
 end_make_ls50:
mov [rbp + 8*(3 + 1)] , r11
mov r11, r15
sub r11,1
add rbp, 8*(5 +0  )
SHIFT_FRAME (4+1) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt50:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next115
mov rax, SOB_FALSE_ADDRESS
ret
next115:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse21 
 mov rax , const_tbl + 32
jmp Lexit21 
 
                              Lelse21: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next112
mov rax, SOB_FALSE_ADDRESS
ret
next112:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*6] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next114
mov rax, SOB_FALSE_ADDRESS
ret
next114:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next113
mov rax, SOB_FALSE_ADDRESS
ret
next113:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next111
mov rax, SOB_FALSE_ADDRESS
ret
t_next111:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit21: 

 leave
 ret
Lcont50:
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
pop qword [rax] 
mov rax, SOB_VOID_ADDRESS
;------------- copy env 51 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 51 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend51
ploop51:
 cmp r11, 0
 je pend51
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop51
pend51:
;---------------- make closure 51 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode51)
jmp Lcont51
Lcode51:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8,  [rbp + 8*3]
 mov r15, [rbp + 8*3]
 mov r10, r8
 mov r11, 0
 sub r10, r11
 cmp r10, 0
 je end_opt51
mov qword [rbp + 8*3], 1
mov r9, [rbp + 8*(3+r8)]
MAKE_PAIR(r11 , r9 , SOB_NIL_ADDRESS)
dec r10
make_ls51:
 cmp r10, 0
 je end_make_ls51
 dec r8
 mov r9, [rbp + 8*(3+r8)]
 MAKE_PAIR(r12 , r9 , r11)
 mov r11, r12
 dec r10
 jmp make_ls51
 end_make_ls51:
mov [rbp + 8*(3 + 1)] , r11
mov r11, r15
sub r11,1
add rbp, 8*(5 +0  )
SHIFT_FRAME (4+1) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt51:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next124
mov rax, SOB_FALSE_ADDRESS
ret
next124:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse22 
 mov rax , const_tbl + 50
jmp Lexit22 
 
                              Lelse22: 
push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 41
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*5] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next123
mov rax, SOB_FALSE_ADDRESS
ret
next123:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [fvar_tbl + 112] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next122
mov rax, SOB_FALSE_ADDRESS
ret
next122:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse23 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next121
mov rax, SOB_FALSE_ADDRESS
ret
next121:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax , const_tbl + 32
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next120
mov rax, SOB_FALSE_ADDRESS
ret
t_next120:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit23 
 
                              Lelse23: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*6] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next118
mov rax, SOB_FALSE_ADDRESS
ret
next118:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next117
mov rax, SOB_FALSE_ADDRESS
ret
next117:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next119
mov rax, SOB_FALSE_ADDRESS
ret
next119:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next116
mov rax, SOB_FALSE_ADDRESS
ret
t_next116:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit23: 
Lexit22: 

 leave
 ret
Lcont51:

 leave
 ret
Lcont49:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next110
mov rax, SOB_FALSE_ADDRESS
ret
t_next110:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont48:
mov sil, [rax]
cmp sil, T_CLOSURE
je next109
mov rax, SOB_FALSE_ADDRESS
ret
next109:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 280], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 144] 
push rax 
mov rax, qword [fvar_tbl + 224] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 296] 
push rax 
mov rax, qword [fvar_tbl + 304] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 7 
;------------- copy env 52 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 52 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend52
ploop52:
 cmp r11, 0
 je pend52
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop52
pend52:
;---------------- make closure 52 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode52)
jmp Lcont52
Lcode52:
 push rbp
 mov rbp, rsp
 ;------------- copy env 53 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 53 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend53
ploop53:
 cmp r11, 0
 je pend53
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop53
pend53:
;---------------- make closure 53 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode53)
jmp Lcont53
Lcode53:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8,  [rbp + 8*3]
 mov r15, [rbp + 8*3]
 mov r10, r8
 mov r11, 0
 sub r10, r11
 cmp r10, 0
 je end_opt53
mov qword [rbp + 8*3], 1
mov r9, [rbp + 8*(3+r8)]
MAKE_PAIR(r11 , r9 , SOB_NIL_ADDRESS)
dec r10
make_ls53:
 cmp r10, 0
 je end_make_ls53
 dec r8
 mov r9, [rbp + 8*(3+r8)]
 MAKE_PAIR(r12 , r9 , r11)
 mov r11, r12
 dec r10
 jmp make_ls53
 end_make_ls53:
mov [rbp + 8*(3 + 1)] , r11
mov r11, r15
sub r11,1
add rbp, 8*(5 +0  )
SHIFT_FRAME (4+1) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt53:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next134
mov rax, SOB_FALSE_ADDRESS
ret
next134:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse24 
 mov rax , const_tbl + 50
jmp Lexit24 
 
                              Lelse24: 
push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 41
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*5] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next133
mov rax, SOB_FALSE_ADDRESS
ret
next133:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [fvar_tbl + 112] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next132
mov rax, SOB_FALSE_ADDRESS
ret
next132:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse25 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next131
mov rax, SOB_FALSE_ADDRESS
ret
next131:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax , const_tbl + 41
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next130
mov rax, SOB_FALSE_ADDRESS
ret
t_next130:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit25 
 
                              Lelse25: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*6] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next128
mov rax, SOB_FALSE_ADDRESS
ret
next128:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*2] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next127
mov rax, SOB_FALSE_ADDRESS
ret
next127:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next129
mov rax, SOB_FALSE_ADDRESS
ret
next129:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next126
mov rax, SOB_FALSE_ADDRESS
ret
t_next126:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit25: 
Lexit24: 

 leave
 ret
Lcont53:

 leave
 ret
Lcont52:
mov sil, [rax]
cmp sil, T_CLOSURE
je next125
mov rax, SOB_FALSE_ADDRESS
ret
next125:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 304], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 112] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 4 
;------------- copy env 54 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 54 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend54
ploop54:
 cmp r11, 0
 je pend54
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop54
pend54:
;---------------- make closure 54 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode54)
jmp Lcont54
Lcode54:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 55 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 55 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend55
ploop55:
 cmp r11, 0
 je pend55
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop55
pend55:
;---------------- make closure 55 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode55)
jmp Lcont55
Lcode55:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 0)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 56 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 56 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend56
ploop56:
 cmp r11, 0
 je pend56
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop56
pend56:
;---------------- make closure 56 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode56)
jmp Lcont56
Lcode56:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next142
mov rax, SOB_FALSE_ADDRESS
ret
next142:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse26 
 mov rax , const_tbl + 4
jmp Lexit26 
 
                              Lelse26: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next141
mov rax, SOB_FALSE_ADDRESS
ret
next141:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next140
mov rax, SOB_FALSE_ADDRESS
ret
next140:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse27 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next138
mov rax, SOB_FALSE_ADDRESS
ret
next138:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next139
mov rax, SOB_FALSE_ADDRESS
ret
next139:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next137
mov rax, SOB_FALSE_ADDRESS
ret
t_next137:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit27 
 
                              Lelse27: 
mov rax , const_tbl + 2
Lexit27: 
Lexit26: 

 leave
 ret
Lcont56:
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
pop qword [rax] 
mov rax, SOB_VOID_ADDRESS
;------------- copy env 57 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 57 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend57
ploop57:
 cmp r11, 0
 je pend57
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop57
pend57:
;---------------- make closure 57 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode57)
jmp Lcont57
Lcode57:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8,  [rbp + 8*3]
 mov r15, [rbp + 8*3]
 mov r10, r8
 mov r11, 0
 sub r10, r11
 cmp r10, 0
 je end_opt57
mov qword [rbp + 8*3], 1
mov r9, [rbp + 8*(3+r8)]
MAKE_PAIR(r11 , r9 , SOB_NIL_ADDRESS)
dec r10
make_ls57:
 cmp r10, 0
 je end_make_ls57
 dec r8
 mov r9, [rbp + 8*(3+r8)]
 MAKE_PAIR(r12 , r9 , r11)
 mov r11, r12
 dec r10
 jmp make_ls57
 end_make_ls57:
mov [rbp + 8*(3 + 1)] , r11
mov r11, r15
sub r11,1
add rbp, 8*(5 +0  )
SHIFT_FRAME (4+1) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt57:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next146
mov rax, SOB_FALSE_ADDRESS
ret
next146:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse28 
 mov rax , const_tbl + 50
jmp Lexit28 
 
                              Lelse28: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next144
mov rax, SOB_FALSE_ADDRESS
ret
next144:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next145
mov rax, SOB_FALSE_ADDRESS
ret
next145:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next143
mov rax, SOB_FALSE_ADDRESS
ret
t_next143:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit28: 

 leave
 ret
Lcont57:

 leave
 ret
Lcont55:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next136
mov rax, SOB_FALSE_ADDRESS
ret
t_next136:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont54:
mov sil, [rax]
cmp sil, T_CLOSURE
je next135
mov rax, SOB_FALSE_ADDRESS
ret
next135:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 112], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 256] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 4 
;------------- copy env 58 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 58 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend58
ploop58:
 cmp r11, 0
 je pend58
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop58
pend58:
;---------------- make closure 58 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode58)
jmp Lcont58
Lcode58:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 59 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 59 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend59
ploop59:
 cmp r11, 0
 je pend59
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop59
pend59:
;---------------- make closure 59 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode59)
jmp Lcont59
Lcode59:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 0)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 60 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 60 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend60
ploop60:
 cmp r11, 0
 je pend60
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop60
pend60:
;---------------- make closure 60 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode60)
jmp Lcont60
Lcode60:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next154
mov rax, SOB_FALSE_ADDRESS
ret
next154:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse29 
 mov rax , const_tbl + 4
jmp Lexit29 
 
                              Lelse29: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next153
mov rax, SOB_FALSE_ADDRESS
ret
next153:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next152
mov rax, SOB_FALSE_ADDRESS
ret
next152:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse30 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next150
mov rax, SOB_FALSE_ADDRESS
ret
next150:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next151
mov rax, SOB_FALSE_ADDRESS
ret
next151:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next149
mov rax, SOB_FALSE_ADDRESS
ret
t_next149:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit30 
 
                              Lelse30: 
mov rax , const_tbl + 2
Lexit30: 
Lexit29: 

 leave
 ret
Lcont60:
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
pop qword [rax] 
mov rax, SOB_VOID_ADDRESS
;------------- copy env 61 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 61 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend61
ploop61:
 cmp r11, 0
 je pend61
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop61
pend61:
;---------------- make closure 61 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode61)
jmp Lcont61
Lcode61:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8,  [rbp + 8*3]
 mov r15, [rbp + 8*3]
 mov r10, r8
 mov r11, 0
 sub r10, r11
 cmp r10, 0
 je end_opt61
mov qword [rbp + 8*3], 1
mov r9, [rbp + 8*(3+r8)]
MAKE_PAIR(r11 , r9 , SOB_NIL_ADDRESS)
dec r10
make_ls61:
 cmp r10, 0
 je end_make_ls61
 dec r8
 mov r9, [rbp + 8*(3+r8)]
 MAKE_PAIR(r12 , r9 , r11)
 mov r11, r12
 dec r10
 jmp make_ls61
 end_make_ls61:
mov [rbp + 8*(3 + 1)] , r11
mov r11, r15
sub r11,1
add rbp, 8*(5 +0  )
SHIFT_FRAME (4+1) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt61:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next158
mov rax, SOB_FALSE_ADDRESS
ret
next158:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse31 
 mov rax , const_tbl + 50
jmp Lexit31 
 
                              Lelse31: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next156
mov rax, SOB_FALSE_ADDRESS
ret
next156:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next157
mov rax, SOB_FALSE_ADDRESS
ret
next157:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next155
mov rax, SOB_FALSE_ADDRESS
ret
t_next155:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit31: 

 leave
 ret
Lcont61:

 leave
 ret
Lcont59:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next148
mov rax, SOB_FALSE_ADDRESS
ret
t_next148:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont58:
mov sil, [rax]
cmp sil, T_CLOSURE
je next147
mov rax, SOB_FALSE_ADDRESS
ret
next147:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 256], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 176] 
push rax 
mov rax, qword [fvar_tbl + 112] 
push rax 
mov rax, qword [fvar_tbl + 256] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 6 
;------------- copy env 62 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 62 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend62
ploop62:
 cmp r11, 0
 je pend62
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop62
pend62:
;---------------- make closure 62 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode62)
jmp Lcont62
Lcode62:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 63 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 63 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend63
ploop63:
 cmp r11, 0
 je pend63
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop63
pend63:
;---------------- make closure 63 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode63)
jmp Lcont63
Lcode63:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 0)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 64 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 64 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend64
ploop64:
 cmp r11, 0
 je pend64
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop64
pend64:
;---------------- make closure 64 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode64)
jmp Lcont64
Lcode64:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next169
mov rax, SOB_FALSE_ADDRESS
ret
next169:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse32 
 mov rax , const_tbl + 4
jmp Lexit32 
 
                              Lelse32: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next168
mov rax, SOB_FALSE_ADDRESS
ret
next168:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next167
mov rax, SOB_FALSE_ADDRESS
ret
next167:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
 jne orLexit34 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next166
mov rax, SOB_FALSE_ADDRESS
ret
next166:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next165
mov rax, SOB_FALSE_ADDRESS
ret
next165:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
orLexit34: 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next164
mov rax, SOB_FALSE_ADDRESS
ret
next164:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse33 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*5] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next162
mov rax, SOB_FALSE_ADDRESS
ret
next162:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next163
mov rax, SOB_FALSE_ADDRESS
ret
next163:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next161
mov rax, SOB_FALSE_ADDRESS
ret
t_next161:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit33 
 
                              Lelse33: 
mov rax , const_tbl + 2
Lexit33: 
Lexit32: 

 leave
 ret
Lcont64:
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
pop qword [rax] 
mov rax, SOB_VOID_ADDRESS
;------------- copy env 65 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 65 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend65
ploop65:
 cmp r11, 0
 je pend65
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop65
pend65:
;---------------- make closure 65 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode65)
jmp Lcont65
Lcode65:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8,  [rbp + 8*3]
 mov r15, [rbp + 8*3]
 mov r10, r8
 mov r11, 0
 sub r10, r11
 cmp r10, 0
 je end_opt65
mov qword [rbp + 8*3], 1
mov r9, [rbp + 8*(3+r8)]
MAKE_PAIR(r11 , r9 , SOB_NIL_ADDRESS)
dec r10
make_ls65:
 cmp r10, 0
 je end_make_ls65
 dec r8
 mov r9, [rbp + 8*(3+r8)]
 MAKE_PAIR(r12 , r9 , r11)
 mov r11, r12
 dec r10
 jmp make_ls65
 end_make_ls65:
mov [rbp + 8*(3 + 1)] , r11
mov r11, r15
sub r11,1
add rbp, 8*(5 +0  )
SHIFT_FRAME (4+1) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt65:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next173
mov rax, SOB_FALSE_ADDRESS
ret
next173:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse35 
 mov rax , const_tbl + 50
jmp Lexit35 
 
                              Lelse35: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*5] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next171
mov rax, SOB_FALSE_ADDRESS
ret
next171:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next172
mov rax, SOB_FALSE_ADDRESS
ret
next172:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next170
mov rax, SOB_FALSE_ADDRESS
ret
t_next170:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit35: 

 leave
 ret
Lcont65:

 leave
 ret
Lcont63:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next160
mov rax, SOB_FALSE_ADDRESS
ret
t_next160:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont62:
mov sil, [rax]
cmp sil, T_CLOSURE
je next159
mov rax, SOB_FALSE_ADDRESS
ret
next159:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 312], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 280] 
push rax 
mov rax, qword [fvar_tbl + 368] 
push rax 
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 184] 
push rax 
mov rax, qword [fvar_tbl + 360] 
push rax 
mov rax, qword [fvar_tbl + 352] 
push rax 
mov rax, qword [fvar_tbl + 344] 
push rax 
mov rax, qword [fvar_tbl + 136] 
push rax 
mov rax, qword [fvar_tbl + 200] 
push rax 
mov rax, qword [fvar_tbl + 208] 
push rax 
mov rax, qword [fvar_tbl + 272] 
push rax 
mov rax, qword [fvar_tbl + 264] 
push rax 
mov rax, qword [fvar_tbl + 336] 
push rax 
mov rax, qword [fvar_tbl + 328] 
push rax 
mov rax, qword [fvar_tbl + 176] 
push rax 
mov rax, qword [fvar_tbl + 112] 
push rax 
mov rax, qword [fvar_tbl + 256] 
push rax 
push 18 
;------------- copy env 66 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 66 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend66
ploop66:
 cmp r11, 0
 je pend66
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop66
pend66:
;---------------- make closure 66 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode66)
jmp Lcont66
Lcode66:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
;------------- copy env 69 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 69 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend69
ploop69:
 cmp r11, 0
 je pend69
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop69
pend69:
;---------------- make closure 69 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode69)
jmp Lcont69
Lcode69:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 70 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 70 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend70
ploop70:
 cmp r11, 0
 je pend70
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop70
pend70:
;---------------- make closure 70 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode70)
jmp Lcont70
Lcode70:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 0)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 71 ----------------
COPY_ENV 32 , 4
mov r15, r14
;---------------- copy args 71 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend71
ploop71:
 cmp r11, 0
 je pend71
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop71
pend71:
;---------------- make closure 71 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode71)
jmp Lcont71
Lcode71:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 32
push rax 
mov rax, qword [rbp + 8 * (4 + 3)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next208
mov rax, SOB_FALSE_ADDRESS
ret
next208:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse50 
 mov rax , const_tbl + 4
jmp Lexit50 
 
                              Lelse50: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 3)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 2 
mov rax, qword [rbp + 8 * (4 + 2)] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next206
mov rax, SOB_FALSE_ADDRESS
ret
next206:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 3)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8 * (4 + 2)] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next207
mov rax, SOB_FALSE_ADDRESS
ret
next207:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [fvar_tbl + 320] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next205
mov rax, SOB_FALSE_ADDRESS
ret
next205:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse51 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 41
push rax 
mov rax, qword [rbp + 8 * (4 + 3)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*17] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next204
mov rax, SOB_FALSE_ADDRESS
ret
next204:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8 * (4 + 2)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 4 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next203
mov rax, SOB_FALSE_ADDRESS
ret
t_next203:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 4) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit51 
 
                              Lelse51: 
mov rax , const_tbl + 2
Lexit51: 
Lexit50: 

 leave
 ret
Lcont71:
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
pop qword [rax] 
mov rax, SOB_VOID_ADDRESS
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next214
mov rax, SOB_FALSE_ADDRESS
ret
next214:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next215
mov rax, SOB_FALSE_ADDRESS
ret
next215:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next213
mov rax, SOB_FALSE_ADDRESS
ret
next213:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next212
mov rax, SOB_FALSE_ADDRESS
ret
next212:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse52 
 mov rax , const_tbl + 2
jmp Lexit52 
 
                              Lelse52: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 41
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next211
mov rax, SOB_FALSE_ADDRESS
ret
next211:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*17] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next210
mov rax, SOB_FALSE_ADDRESS
ret
next210:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*2] 
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
push rax 
push 4 
mov rax, qword [rbp + 8 * (4 + 0)] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next209
mov rax, SOB_FALSE_ADDRESS
ret
t_next209:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 4) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit52: 

 leave
 ret
Lcont70:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next202
mov rax, SOB_FALSE_ADDRESS
ret
t_next202:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont69:
push rax 
push 1 
;------------- copy env 67 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 67 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend67
ploop67:
 cmp r11, 0
 je pend67
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop67
pend67:
;---------------- make closure 67 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode67)
jmp Lcont67
Lcode67:
 push rbp
 mov rbp, rsp
 ;------------- copy env 68 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 68 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend68
ploop68:
 cmp r11, 0
 je pend68
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop68
pend68:
;---------------- make closure 68 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode68)
jmp Lcont68
Lcode68:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*7] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next179
mov rax, SOB_FALSE_ADDRESS
ret
next179:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse37 
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*7] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next178
mov rax, SOB_FALSE_ADDRESS
ret
next178:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse38 
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next177
mov rax, SOB_FALSE_ADDRESS
ret
next177:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit38 
 
                              Lelse38: 
mov rax , const_tbl + 2
Lexit38: 
jmp Lexit37 
 
                              Lelse37: 
mov rax , const_tbl + 2
Lexit37: 
cmp rax, SOB_FALSE_ADDRESS 
 jne orLexit36 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*8] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next182
mov rax, SOB_FALSE_ADDRESS
ret
next182:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse39 
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*8] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next181
mov rax, SOB_FALSE_ADDRESS
ret
next181:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse40 
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next180
mov rax, SOB_FALSE_ADDRESS
ret
next180:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit40 
 
                              Lelse40: 
mov rax , const_tbl + 2
Lexit40: 
jmp Lexit39 
 
                              Lelse39: 
mov rax , const_tbl + 2
Lexit39: 
cmp rax, SOB_FALSE_ADDRESS 
 jne orLexit36 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*9] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next190
mov rax, SOB_FALSE_ADDRESS
ret
next190:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse41 
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*9] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next189
mov rax, SOB_FALSE_ADDRESS
ret
next189:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse42 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*14] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next187
mov rax, SOB_FALSE_ADDRESS
ret
next187:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*14] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next188
mov rax, SOB_FALSE_ADDRESS
ret
next188:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [fvar_tbl + 320] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next186
mov rax, SOB_FALSE_ADDRESS
ret
next186:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse43 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*15] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next184
mov rax, SOB_FALSE_ADDRESS
ret
next184:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*15] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next185
mov rax, SOB_FALSE_ADDRESS
ret
next185:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [fvar_tbl + 320] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next183
mov rax, SOB_FALSE_ADDRESS
ret
next183:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit43 
 
                              Lelse43: 
mov rax , const_tbl + 2
Lexit43: 
jmp Lexit42 
 
                              Lelse42: 
mov rax , const_tbl + 2
Lexit42: 
jmp Lexit41 
 
                              Lelse41: 
mov rax , const_tbl + 2
Lexit41: 
cmp rax, SOB_FALSE_ADDRESS 
 jne orLexit36 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*10] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next195
mov rax, SOB_FALSE_ADDRESS
ret
next195:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse44 
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*10] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next194
mov rax, SOB_FALSE_ADDRESS
ret
next194:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse45 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*16] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next192
mov rax, SOB_FALSE_ADDRESS
ret
next192:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*16] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next193
mov rax, SOB_FALSE_ADDRESS
ret
next193:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next191
mov rax, SOB_FALSE_ADDRESS
ret
next191:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit45 
 
                              Lelse45: 
mov rax , const_tbl + 2
Lexit45: 
jmp Lexit44 
 
                              Lelse44: 
mov rax , const_tbl + 2
Lexit44: 
cmp rax, SOB_FALSE_ADDRESS 
 jne orLexit36 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*11] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next198
mov rax, SOB_FALSE_ADDRESS
ret
next198:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse46 
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*11] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next197
mov rax, SOB_FALSE_ADDRESS
ret
next197:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse47 
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*4] 
push rax 
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 4 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next196
mov rax, SOB_FALSE_ADDRESS
ret
next196:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit47 
 
                              Lelse47: 
mov rax , const_tbl + 2
Lexit47: 
jmp Lexit46 
 
                              Lelse46: 
mov rax , const_tbl + 2
Lexit46: 
cmp rax, SOB_FALSE_ADDRESS 
 jne orLexit36 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*12] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next201
mov rax, SOB_FALSE_ADDRESS
ret
next201:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse48 
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*12] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next200
mov rax, SOB_FALSE_ADDRESS
ret
next200:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse49 
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*6] 
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*5] 
push rax 
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 4 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next199
mov rax, SOB_FALSE_ADDRESS
ret
next199:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit49 
 
                              Lelse49: 
mov rax , const_tbl + 2
Lexit49: 
jmp Lexit48 
 
                              Lelse48: 
mov rax , const_tbl + 2
Lexit48: 
cmp rax, SOB_FALSE_ADDRESS 
 jne orLexit36 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*13] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next176
mov rax, SOB_FALSE_ADDRESS
ret
t_next176:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
orLexit36: 

 leave
 ret
Lcont68:

 leave
 ret
Lcont67:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next175
mov rax, SOB_FALSE_ADDRESS
ret
t_next175:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont66:
mov sil, [rax]
cmp sil, T_CLOSURE
je next174
mov rax, SOB_FALSE_ADDRESS
ret
next174:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 320], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

;------------- copy env 72 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 72 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
inc r11
 cmp r11, 0
 je pend72
ploop72:
 cmp r11, 0
 je pend72
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop72
pend72:
;---------------- make closure 72 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode72)
jmp Lcont72
Lcode72:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 32
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [fvar_tbl + 112] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next218
mov rax, SOB_FALSE_ADDRESS
ret
next218:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse53 
 mov rax , const_tbl + 133
jmp Lexit53 
 
                              Lelse53: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 41
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [fvar_tbl + 280] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next217
mov rax, SOB_FALSE_ADDRESS
ret
next217:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 1 
mov rax, qword [fvar_tbl + 376] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next216
mov rax, SOB_FALSE_ADDRESS
ret
t_next216:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit53: 

 leave
 ret
Lcont72:
mov qword [fvar_tbl + 376], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 142
push rax 
push 1 
mov rax, qword [fvar_tbl + 376] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next219
mov rax, SOB_FALSE_ADDRESS
ret
next219:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx

    call write_sob_if_not_void
 add rsp, 4*8
 pop rbp
 ret
l_apply:
    push rbp
    mov r15, rbp
    mov rbp, rsp

    mov r8, [rbp + 8*3]  ; size of args
    mov r9, [rbp + 8*(3 + r8)] ; get list

    mov rdx, 0   ; counter
    mov rdi, rdx 
    push SOB_NIL_ADDRESS ; magic
    cmp r9, SOB_NIL_ADDRESS
    je .end_swap

   
    .loop:
        inc rdx
        CAR r10, r9
        push r10

        CDR r11, r9
        mov r9, r11

        cmp r9, SOB_NIL_ADDRESS
        jne .loop
    .end:
    mov rdi, rdx   ; backup list size

    mov r8, rsp
    mov r9, rbp
    sub r9, 16 

    .swap:
        cmp r8, r9
        jge .end_swap

        mov r10,  [r8]
        mov r11,  [r9]
        mov [r8], r11
        mov [r9], r10
        
        add r8, 8
        sub r9, 8

        jmp .swap
    .end_swap:

    mov rdx, [rbp + 3*8]
    sub rdx, 1

    .args:
        push qword [rbp + 8*(3 + rdx)]
        dec rdx
        cmp rdx, 0
        jne .args
    .end_args:

    pop r8   ; function
    mov r9, [rbp + 8*3]
    sub r9, 2
    add r9, rdi

    push r9  ; push new size
    CLOSURE_CODE r11 , r8
    CLOSURE_ENV r12 , r8
    push r12
    push qword [rbp + 1*8]
    
    add r9, 5
    mov r10, [rbp + 3*8]
    add r10, 5

    APPLY_SHIFT_FRAME r9 , r10 

    mov rbp, r15
    
    mov rax, 8
    mul r10
    add rsp, rax

    jmp r11

l_cons:
    push rbp
    mov rbp, rsp
    
    mov rdi, PVAR(0)
    mov rsi, PVAR(1)
    MAKE_PAIR (rax, rdi, rsi)

    leave
    ret

l_car:
    push rbp
    mov rbp, rsp

    mov rdi, PVAR(0)
    CAR rax, rdi

    leave
    ret

l_cdr:
    push rbp
    mov rbp, rsp

    mov rdi, PVAR(0)
    CDR rax, rdi

    leave
    ret

set_car:
    push rbp
    mov rbp, rsp

    mov r10, [rbp + 8*4]
    mov r11, [rbp + 8*5]
    mov qword [r10 + 1], r11
    mov rax, SOB_VOID_ADDRESS
    
    leave
    ret

set_cdr:
    push rbp
    mov rbp, rsp

    mov rdi, [rbp + 8*4]
    mov rsi, [rbp+ 8*5]
 
    mov qword [rdi + 9], rsi
    mov rax, SOB_VOID_ADDRESS

    leave
    ret  







is_boolean:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_BOOL
    jne .wrong_type
    mov rax, sob_true
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_float:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_FLOAT
    jne .wrong_type
    mov rax, sob_true
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_integer:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_INTEGER
    jne .wrong_type
    mov rax, sob_true
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_pair:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_PAIR
    jne .wrong_type
    mov rax, sob_true
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_null:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_NIL
    jne .wrong_type
    mov rax, sob_true
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_char:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_CHAR
    jne .wrong_type
    mov rax, sob_true
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_vector:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_VECTOR
    jne .wrong_type
    mov rax, sob_true
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_string:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_STRING
    jne .wrong_type
    mov rax, sob_true
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_procedure:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_CLOSURE
    jne .wrong_type
    mov rax, sob_true
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_symbol:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_SYMBOL
    jne .wrong_type
    mov rax, sob_true
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

string_length:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    STRING_LENGTH rsi, rsi
    MAKE_INT(rax, rsi)

    leave
    ret

string_ref:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0) 
    STRING_ELEMENTS rsi, rsi
    mov rdi, PVAR(1)
    INT_VAL rdi, rdi
    shl rdi, 0
    add rsi, rdi

    mov sil, byte [rsi]
    MAKE_CHAR(rax, sil)

    leave
    ret

string_set:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0) 
    STRING_ELEMENTS rsi, rsi
    mov rdi, PVAR(1)
    INT_VAL rdi, rdi
    shl rdi, 0
    add rsi, rdi

    mov rax, PVAR(2)
    CHAR_VAL rax, rax
    mov byte [rsi], al
    mov rax, SOB_VOID_ADDRESS

    leave
    ret

make_string:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    mov rdi, PVAR(1)
    CHAR_VAL rdi, rdi
    and rdi, 255

    MAKE_STRING rax, rsi, dil

    leave
    ret

vector_length:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    VECTOR_LENGTH rsi, rsi
    MAKE_INT(rax, rsi)

    leave
    ret

vector_ref:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0) 
    VECTOR_ELEMENTS rsi, rsi
    mov rdi, PVAR(1)
    INT_VAL rdi, rdi
    shl rdi, 3
    add rsi, rdi

    mov rax, [rsi]

    leave
    ret

vector_set:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0) 
    VECTOR_ELEMENTS rsi, rsi
    mov rdi, PVAR(1)
    INT_VAL rdi, rdi
    shl rdi, 3
    add rsi, rdi

    mov rdi, PVAR(2)
    mov [rsi], rdi
    mov rax, SOB_VOID_ADDRESS

    leave
    ret

make_vector:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    mov rdi, PVAR(1)
    

    MAKE_VECTOR rax, rsi, rdi

    leave
    ret

symbol_to_string:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    SYMBOL_VAL rsi, rsi
    
    STRING_LENGTH rcx, rsi
    STRING_ELEMENTS rdi, rsi

    push rcx
    push rdi

    mov dil, byte [rdi]
    MAKE_CHAR(rax, dil)
    push rax
    MAKE_INT(rax, rcx)
    push rax
    push 2
    push SOB_NIL_ADDRESS
    call make_string
    add rsp, 4*8

    STRING_ELEMENTS rsi, rax

    pop rdi
    pop rcx

.loop:
    cmp rcx, 0
    je .end
    lea r8, [rdi+rcx]
    lea r9, [rsi+rcx]

    mov bl, byte [r8]
    mov byte [r9], bl
    
    dec rcx
.end:

    leave
    ret

char_to_integer:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    CHAR_VAL rsi, rsi
    and rsi, 255
    MAKE_INT(rax, rsi)

    leave
    ret

integer_to_char:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    and rsi, 255
    MAKE_CHAR(rax, sil)

    leave
    ret

is_eq:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    mov rdi, PVAR(1)
    cmp rsi, rdi
    je .true
    mov rax, SOB_FALSE_ADDRESS
    jmp .return

.true:
    mov rax, SOB_TRUE_ADDRESS

.return:
    leave
    ret

bin_add:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    addsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_mul:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    mulsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_sub:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    subsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_div:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    divsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_lt:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    cmpltsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    INT_VAL rsi, rax
    cmp rsi, 0
    je .return_false
    mov rax, SOB_TRUE_ADDRESS
    jmp .final_return

.return_false:
    mov rax, SOB_FALSE_ADDRESS

.final_return:


    leave
    ret

bin_equ:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    cmpeqsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    INT_VAL rsi, rax
    cmp rsi, 0
    je .return_false
    mov rax, SOB_TRUE_ADDRESS
    jmp .final_return

.return_false:
    mov rax, SOB_FALSE_ADDRESS

.final_return:


    leave
    ret

