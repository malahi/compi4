
;;; All the macros and the scheme-object printing procedure
;;; are defined in compiler.s
%include "compiler.s"

section .bss
malloc_pointer:
    resq 1

section .data
const_tbl:
MAKE_VOID
MAKE_NIL
MAKE_BOOL(0)
MAKE_BOOL(1)
MAKE_LITERAL_STRING 119,104,97,116,101,118,101,114
MAKE_LITERAL_SYMBOL( const_tbl + 6)
MAKE_LITERAL_INT(0)
MAKE_LITERAL_INT(1)
MAKE_LITERAL_STRING 116,104,105,115,32,115,104,111,117,108,100,32,98,101,32,97,110,32,101,114,114,111,114,44,32,98,117,116,32,121,111,117,32,100,111,110,39,116,32,115,117,112,112,111,114,116,32,101,120,99,101,112,116,105,111,110,115
MAKE_LITERAL_CHAR(0)
MAKE_LITERAL_INT(3)

;;; These macro definitions are required for the primitive
;;; definitions in the epilogue to work properly
%define SOB_VOID_ADDRESS const_tbl + 0
%define SOB_NIL_ADDRESS const_tbl + 1
%define SOB_FALSE_ADDRESS const_tbl + 2
%define SOB_TRUE_ADDRESS const_tbl + 4
%define sob_true SOB_TRUE_ADDRESS

fvar_tbl:
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED

global main
section .text
main:
    push rbp
    mov rbp, rsp
    ;; set up the heap
    mov rdi, GB(4)
    call malloc
    mov [malloc_pointer], rax

    ;; Set up the dummy activation frame
    ;; The dummy return address is T_UNDEFINED
    ;; (which a is a macro for 0) so that returning
    ;; from the top level (which SHOULD NOT HAPPEN
    ;; AND IS A BUG) will cause a segfault.
    push 0
    push qword SOB_NIL_ADDRESS
    push qword T_UNDEFINED
    push rsp
    mov rbp, rsp
    jmp code_fragment
  

code_fragment:
    ;; Set up the primitive stdlib fvars:
    ;; Since the primtive procedures are defined in assembly,
    ;; they are not generated by scheme (define ...) expressions.
    ;; This is where we emulate the missing (define ...) expressions
    ;; for all the primitive procedures.
        MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_boolean)
    mov [fvar_tbl + 0], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_float)
    mov [fvar_tbl + 200], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_integer)
    mov [fvar_tbl + 208], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_pair)
    mov [fvar_tbl + 136], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_null)
    mov [fvar_tbl + 72], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_char)
    mov [fvar_tbl + 344], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_vector)
    mov [fvar_tbl + 360], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_string)
    mov [fvar_tbl + 352], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_procedure)
    mov [fvar_tbl + 8], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_symbol)
    mov [fvar_tbl + 16], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_length)
    mov [fvar_tbl + 328], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_ref)
    mov [fvar_tbl + 336], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_set)
    mov [fvar_tbl + 24], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, make_string)
    mov [fvar_tbl + 160], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, vector_length)
    mov [fvar_tbl + 272], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, vector_ref)
    mov [fvar_tbl + 264], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, vector_set)
    mov [fvar_tbl + 240], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, make_vector)
    mov [fvar_tbl + 168], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, symbol_to_string)
    mov [fvar_tbl + 32], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, char_to_integer)
    mov [fvar_tbl + 368], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, integer_to_char)
    mov [fvar_tbl + 40], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_eq)
    mov [fvar_tbl + 184], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_add)
    mov [fvar_tbl + 152], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_mul)
    mov [fvar_tbl + 296], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_sub)
    mov [fvar_tbl + 280], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_div)
    mov [fvar_tbl + 304], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_lt)
    mov [fvar_tbl + 256], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_equ)
    mov [fvar_tbl + 112], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, car)
    mov [fvar_tbl + 80], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, cdr)
    mov [fvar_tbl + 88], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, set_car)
    mov [fvar_tbl + 48], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, set_cdr)
    mov [fvar_tbl + 56], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, cons)
    mov [fvar_tbl + 96], rax
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, apply)
    mov [fvar_tbl + 224], rax

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 96] 
push rax 
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 4 
;------------- copy env 2 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 2 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend2
inc r11
ploop2:
 cmp r11, 0
 je pend2
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop2
pend2:
;---------------- make closure 2 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode2)
jmp Lcont2
Lcode2:
 push rbp
 mov rbp, rsp
 ;------------- copy env 3 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 3 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend3
inc r11
ploop3:
 cmp r11, 0
 je pend3
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop3
pend3:
;---------------- make closure 3 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode3)
jmp Lcont3
Lcode3:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8, [rbp + 8*3]
 mov r10, r8
 mov r11, 0
 sub r10, r11
 cmp r10, 0
 je end_opt3
mov qword [rbp + 8*3], 1
mov rax, r10
dec rax
mov rdx, 8
mul rdx
mov r15, rax
sub r15, 8
MALLOC r11, rax
add r11, r15
mov r12, r8
add r12, 3
mov rax, r12
mov rdx, 8
mul rdx
mov r12, rax
mov r13, rbp
add r13, r12
mov r9, r10
dec r9
opt_loop3:
 cmp r10, 0
 je opt_end_loop3
 mov r14, [r13]
 mov qword [r11], r14
 sub r13, 8
 sub r11, 8
 dec r10
 jmp opt_loop3
opt_end_loop3:
 add r11, 8
add r11, r15
MAKE_LIST r11 , r9
mov [rbp + 8*(3+1)], rdx
mov r11, r8
sub r11,1
add rbp, 8*(5 +0  )
SHIFT_FRAME (4+1) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt3:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
mov rax , const_tbl + 1
push rax 
push 2 
push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 6 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 6 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend6
inc r11
ploop6:
 cmp r11, 0
 je pend6
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop6
pend6:
;---------------- make closure 6 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode6)
jmp Lcont6
Lcode6:
 push rbp
 mov rbp, rsp
 ;------------- copy env 7 ----------------
COPY_ENV 32 , 4
mov r15, r14
;---------------- copy args 7 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend7
inc r11
ploop7:
 cmp r11, 0
 je pend7
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop7
pend7:
;---------------- make closure 7 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode7)
jmp Lcont7
Lcode7:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next22
mov rax, SOB_FALSE_ADDRESS
ret
next22:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse8 
 mov rax, qword [rbp + 8 * (4 + 0)] 
jmp Lexit8 
 
                              Lelse8: 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 11 ----------------
COPY_ENV 40 , 5
mov r15, r14
;---------------- copy args 11 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend11
inc r11
ploop11:
 cmp r11, 0
 je pend11
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop11
pend11:
;---------------- make closure 11 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode11)
jmp Lcont11
Lcode11:
 push rbp
 mov rbp, rsp
 ;------------- copy env 12 ----------------
COPY_ENV 48 , 6
mov r15, r14
;---------------- copy args 12 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend12
inc r11
ploop12:
 cmp r11, 0
 je pend12
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop12
pend12:
;---------------- make closure 12 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode12)
jmp Lcont12
Lcode12:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*4] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next21
mov rax, SOB_FALSE_ADDRESS
ret
next21:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse13 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*4] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next19
mov rax, SOB_FALSE_ADDRESS
ret
next19:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*4] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next20
mov rax, SOB_FALSE_ADDRESS
ret
next20:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next18
mov rax, SOB_FALSE_ADDRESS
ret
t_next18:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit13 
 
                              Lelse13: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*4] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next16
mov rax, SOB_FALSE_ADDRESS
ret
next16:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next15
mov rax, SOB_FALSE_ADDRESS
ret
next15:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*4] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next17
mov rax, SOB_FALSE_ADDRESS
ret
next17:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*4] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next14
mov rax, SOB_FALSE_ADDRESS
ret
t_next14:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit13: 

 leave
 ret
Lcont12:
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
mov rax, qword [rbp + 8 * (4 + 0)] 

 leave
 ret
Lcont11:
mov sil, [rax]
cmp sil, T_CLOSURE
je next10
mov rax, SOB_FALSE_ADDRESS
ret
next10:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next9
mov rax, SOB_FALSE_ADDRESS
ret
t_next9:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit8: 

 leave
 ret
Lcont7:
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
mov rax, qword [rbp + 8 * (4 + 0)] 

 leave
 ret
Lcont6:
mov sil, [rax]
cmp sil, T_CLOSURE
je next5
mov rax, SOB_FALSE_ADDRESS
ret
next5:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next4
mov rax, SOB_FALSE_ADDRESS
ret
t_next4:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont3:

 leave
 ret
Lcont2:
mov sil, [rax]
cmp sil, T_CLOSURE
je next1
mov rax, SOB_FALSE_ADDRESS
ret
next1:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 64], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 112] 
push rax 
push 1 
;------------- copy env 24 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 24 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend24
inc r11
ploop24:
 cmp r11, 0
 je pend24
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop24
pend24:
;---------------- make closure 24 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode24)
jmp Lcont24
Lcode24:
 push rbp
 mov rbp, rsp
 ;------------- copy env 25 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 25 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend25
inc r11
ploop25:
 cmp r11, 0
 je pend25
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop25
pend25:
;---------------- make closure 25 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode25)
jmp Lcont25
Lcode25:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 32
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next26
mov rax, SOB_FALSE_ADDRESS
ret
t_next26:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont25:

 leave
 ret
Lcont24:
mov sil, [rax]
cmp sil, T_CLOSURE
je next23
mov rax, SOB_FALSE_ADDRESS
ret
next23:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 104], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

;------------- copy env 27 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 27 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend27
inc r11
ploop27:
 cmp r11, 0
 je pend27
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop27
pend27:
;---------------- make closure 27 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode27)
jmp Lcont27
Lcode27:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8, [rbp + 8*3]
 mov r10, r8
 mov r11, 0
 sub r10, r11
 cmp r10, 0
 je end_opt27
mov qword [rbp + 8*3], 1
mov rax, r10
dec rax
mov rdx, 8
mul rdx
mov r15, rax
sub r15, 8
MALLOC r11, rax
add r11, r15
mov r12, r8
add r12, 3
mov rax, r12
mov rdx, 8
mul rdx
mov r12, rax
mov r13, rbp
add r13, r12
mov r9, r10
dec r9
opt_loop27:
 cmp r10, 0
 je opt_end_loop27
 mov r14, [r13]
 mov qword [r11], r14
 sub r13, 8
 sub r11, 8
 dec r10
 jmp opt_loop27
opt_end_loop27:
 add r11, 8
add r11, r15
MAKE_LIST r11 , r9
mov [rbp + 8*(3+1)], rdx
mov r11, r8
sub r11,1
add rbp, 8*(5 +0  )
SHIFT_FRAME (4+1) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt27:
 mov rax, qword [rbp + 8 * (4 + 0)] 

 leave
 ret
Lcont27:
mov qword [fvar_tbl + 120], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 136] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 3 
;------------- copy env 29 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 29 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend29
inc r11
ploop29:
 cmp r11, 0
 je pend29
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop29
pend29:
;---------------- make closure 29 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode29)
jmp Lcont29
Lcode29:
 push rbp
 mov rbp, rsp
 ;------------- copy env 30 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 30 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend30
inc r11
ploop30:
 cmp r11, 0
 je pend30
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop30
pend30:
;---------------- make closure 30 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode30)
jmp Lcont30
Lcode30:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next36
mov rax, SOB_FALSE_ADDRESS
ret
next36:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
 jne orLexit31 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next35
mov rax, SOB_FALSE_ADDRESS
ret
next35:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse32 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next34
mov rax, SOB_FALSE_ADDRESS
ret
next34:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 1 
mov rax, qword [fvar_tbl + 128] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next33
mov rax, SOB_FALSE_ADDRESS
ret
t_next33:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit32 
 
                              Lelse32: 
mov rax , const_tbl + 2
Lexit32: 
orLexit31: 

 leave
 ret
Lcont30:

 leave
 ret
Lcont29:
mov sil, [rax]
cmp sil, T_CLOSURE
je next28
mov rax, SOB_FALSE_ADDRESS
ret
next28:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 128], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 152] 
push rax 
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 136] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 4 
;------------- copy env 38 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 38 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend38
inc r11
ploop38:
 cmp r11, 0
 je pend38
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop38
pend38:
;---------------- make closure 38 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode38)
jmp Lcont38
Lcode38:
 push rbp
 mov rbp, rsp
 ;------------- copy env 39 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 39 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend39
inc r11
ploop39:
 cmp r11, 0
 je pend39
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop39
pend39:
;---------------- make closure 39 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode39)
jmp Lcont39
Lcode39:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
mov rax , const_tbl + 23
push rax 
push 2 
;------------- copy env 41 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 41 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend41
inc r11
ploop41:
 cmp r11, 0
 je pend41
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop41
pend41:
;---------------- make closure 41 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode41)
jmp Lcont41
Lcode41:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 1)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 1)] , rax 
mov rax, SOB_VOID_ADDRESS 
mov rax , const_tbl + 32
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 42 ----------------
COPY_ENV 32 , 4
mov r15, r14
;---------------- copy args 42 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend42
inc r11
ploop42:
 cmp r11, 0
 je pend42
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop42
pend42:
;---------------- make closure 42 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode42)
jmp Lcont42
Lcode42:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next49
mov rax, SOB_FALSE_ADDRESS
ret
next49:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse43 
 mov rax, qword [rbp + 8 * (4 + 1)] 
jmp Lexit43 
 
                              Lelse43: 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next48
mov rax, SOB_FALSE_ADDRESS
ret
next48:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse44 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
mov rax , const_tbl + 41
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next46
mov rax, SOB_FALSE_ADDRESS
ret
next46:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next47
mov rax, SOB_FALSE_ADDRESS
ret
next47:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next45
mov rax, SOB_FALSE_ADDRESS
ret
t_next45:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit44 
 
                              Lelse44: 
mov rax , const_tbl + 50
Lexit44: 
Lexit43: 

 leave
 ret
Lcont42:
push rax 
mov rax, qword [rbp + 8 * (4 + 1)] 
pop qword [rax] 

                         mov rax, SOB_VOID_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 32
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
push rax 
push 2 
mov rax, qword [rbp + 8 * (4 + 1)] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next50
mov rax, SOB_FALSE_ADDRESS
ret
t_next50:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont41:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next40
mov rax, SOB_FALSE_ADDRESS
ret
t_next40:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont39:

 leave
 ret
Lcont38:
mov sil, [rax]
cmp sil, T_CLOSURE
je next37
mov rax, SOB_FALSE_ADDRESS
ret
next37:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 144], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 144] 
push rax 
mov rax, qword [fvar_tbl + 112] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 160] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 5 
;------------- copy env 52 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 52 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend52
inc r11
ploop52:
 cmp r11, 0
 je pend52
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop52
pend52:
;---------------- make closure 52 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode52)
jmp Lcont52
Lcode52:
 push rbp
 mov rbp, rsp
 ;------------- copy env 53 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 53 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend53
inc r11
ploop53:
 cmp r11, 0
 je pend53
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop53
pend53:
;---------------- make closure 53 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode53)
jmp Lcont53
Lcode53:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8, [rbp + 8*3]
 mov r10, r8
 mov r11, 1
 sub r10, r11
 cmp r10, 0
 je end_opt53
mov qword [rbp + 8*3], 2
mov rax, r10
dec rax
mov rdx, 8
mul rdx
mov r15, rax
sub r15, 8
MALLOC r11, rax
add r11, r15
mov r12, r8
add r12, 3
mov rax, r12
mov rdx, 8
mul rdx
mov r12, rax
mov r13, rbp
add r13, r12
mov r9, r10
dec r9
opt_loop53:
 cmp r10, 0
 je opt_end_loop53
 mov r14, [r13]
 mov qword [r11], r14
 sub r13, 8
 sub r11, 8
 dec r10
 jmp opt_loop53
opt_end_loop53:
 add r11, 8
add r11, r15
MAKE_LIST r11 , r9
mov [rbp + 8*(3+2)], rdx
mov r11, r8
sub r11,2
add rbp, 8*(5 +1  )
SHIFT_FRAME (4+2) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt53:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next61
mov rax, SOB_FALSE_ADDRESS
ret
next61:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse54 
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 116
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next60
mov rax, SOB_FALSE_ADDRESS
ret
t_next60:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit54 
 
                              Lelse54: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next59
mov rax, SOB_FALSE_ADDRESS
ret
next59:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax , const_tbl + 41
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next58
mov rax, SOB_FALSE_ADDRESS
ret
next58:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse55 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next57
mov rax, SOB_FALSE_ADDRESS
ret
next57:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next56
mov rax, SOB_FALSE_ADDRESS
ret
t_next56:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit55 
 
                              Lelse55: 
mov rax , const_tbl + 50
Lexit55: 
Lexit54: 

 leave
 ret
Lcont53:

 leave
 ret
Lcont52:
mov sil, [rax]
cmp sil, T_CLOSURE
je next51
mov rax, SOB_FALSE_ADDRESS
ret
next51:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 160], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 72] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 168] 
push rax 
mov rax, qword [fvar_tbl + 144] 
push rax 
push 4 
;------------- copy env 63 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 63 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend63
inc r11
ploop63:
 cmp r11, 0
 je pend63
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop63
pend63:
;---------------- make closure 63 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode63)
jmp Lcont63
Lcode63:
 push rbp
 mov rbp, rsp
 ;------------- copy env 64 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 64 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend64
inc r11
ploop64:
 cmp r11, 0
 je pend64
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop64
pend64:
;---------------- make closure 64 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode64)
jmp Lcont64
Lcode64:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8, [rbp + 8*3]
 mov r10, r8
 mov r11, 1
 sub r10, r11
 cmp r10, 0
 je end_opt64
mov qword [rbp + 8*3], 2
mov rax, r10
dec rax
mov rdx, 8
mul rdx
mov r15, rax
sub r15, 8
MALLOC r11, rax
add r11, r15
mov r12, r8
add r12, 3
mov rax, r12
mov rdx, 8
mul rdx
mov r12, rax
mov r13, rbp
add r13, r12
mov r9, r10
dec r9
opt_loop64:
 cmp r10, 0
 je opt_end_loop64
 mov r14, [r13]
 mov qword [r11], r14
 sub r13, 8
 sub r11, 8
 dec r10
 jmp opt_loop64
opt_end_loop64:
 add r11, 8
add r11, r15
MAKE_LIST r11 , r9
mov [rbp + 8*(3+2)], rdx
mov r11, r8
sub r11,2
add rbp, 8*(5 +1  )
SHIFT_FRAME (4+2) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt64:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next72
mov rax, SOB_FALSE_ADDRESS
ret
next72:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse65 
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 32
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next71
mov rax, SOB_FALSE_ADDRESS
ret
t_next71:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit65 
 
                              Lelse65: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next70
mov rax, SOB_FALSE_ADDRESS
ret
next70:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax , const_tbl + 41
push rax 
push 2 
mov rax, qword [fvar_tbl + 112] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next69
mov rax, SOB_FALSE_ADDRESS
ret
next69:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse66 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next68
mov rax, SOB_FALSE_ADDRESS
ret
next68:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next67
mov rax, SOB_FALSE_ADDRESS
ret
t_next67:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit66 
 
                              Lelse66: 
mov rax , const_tbl + 50
Lexit66: 
Lexit65: 

 leave
 ret
Lcont64:

 leave
 ret
Lcont63:
mov sil, [rax]
cmp sil, T_CLOSURE
je next62
mov rax, SOB_FALSE_ADDRESS
ret
next62:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 168], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 184] 
push rax 
push 1 
;------------- copy env 74 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 74 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend74
inc r11
ploop74:
 cmp r11, 0
 je pend74
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop74
pend74:
;---------------- make closure 74 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode74)
jmp Lcont74
Lcode74:
 push rbp
 mov rbp, rsp
 ;------------- copy env 75 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 75 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend75
inc r11
ploop75:
 cmp r11, 0
 je pend75
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop75
pend75:
;---------------- make closure 75 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode75)
jmp Lcont75
Lcode75:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 4
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next77
mov rax, SOB_FALSE_ADDRESS
ret
next77:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse76 
 mov rax , const_tbl + 2
jmp Lexit76 
 
                              Lelse76: 
mov rax , const_tbl + 4
Lexit76: 

 leave
 ret
Lcont75:

 leave
 ret
Lcont74:
mov sil, [rax]
cmp sil, T_CLOSURE
je next73
mov rax, SOB_FALSE_ADDRESS
ret
next73:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 176], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 208] 
push rax 
mov rax, qword [fvar_tbl + 200] 
push rax 
push 2 
;------------- copy env 79 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 79 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend79
inc r11
ploop79:
 cmp r11, 0
 je pend79
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop79
pend79:
;---------------- make closure 79 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode79)
jmp Lcont79
Lcode79:
 push rbp
 mov rbp, rsp
 ;------------- copy env 80 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 80 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend80
inc r11
ploop80:
 cmp r11, 0
 je pend80
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop80
pend80:
;---------------- make closure 80 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode80)
jmp Lcont80
Lcode80:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next83
mov rax, SOB_FALSE_ADDRESS
ret
next83:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
 jne orLexit81 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next82
mov rax, SOB_FALSE_ADDRESS
ret
t_next82:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
orLexit81: 

 leave
 ret
Lcont80:

 leave
 ret
Lcont79:
mov sil, [rax]
cmp sil, T_CLOSURE
je next78
mov rax, SOB_FALSE_ADDRESS
ret
next78:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 192], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 224] 
push rax 
mov rax, qword [fvar_tbl + 96] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 5 
;------------- copy env 85 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 85 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend85
inc r11
ploop85:
 cmp r11, 0
 je pend85
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop85
pend85:
;---------------- make closure 85 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode85)
jmp Lcont85
Lcode85:
 push rbp
 mov rbp, rsp
 ;------------- copy env 86 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 86 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend86
inc r11
ploop86:
 cmp r11, 0
 je pend86
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop86
pend86:
;---------------- make closure 86 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode86)
jmp Lcont86
Lcode86:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8, [rbp + 8*3]
 mov r10, r8
 mov r11, 2
 sub r10, r11
 cmp r10, 0
 je end_opt86
mov qword [rbp + 8*3], 3
mov rax, r10
dec rax
mov rdx, 8
mul rdx
mov r15, rax
sub r15, 8
MALLOC r11, rax
add r11, r15
mov r12, r8
add r12, 3
mov rax, r12
mov rdx, 8
mul rdx
mov r12, rax
mov r13, rbp
add r13, r12
mov r9, r10
dec r9
opt_loop86:
 cmp r10, 0
 je opt_end_loop86
 mov r14, [r13]
 mov qword [r11], r14
 sub r13, 8
 sub r11, 8
 dec r10
 jmp opt_loop86
opt_end_loop86:
 add r11, 8
add r11, r15
MAKE_LIST r11 , r9
mov [rbp + 8*(3+3)], rdx
mov r11, r8
sub r11,3
add rbp, 8*(5 +2  )
SHIFT_FRAME (4+3) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt86:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 2)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next116
mov rax, SOB_FALSE_ADDRESS
ret
next116:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse87 
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
;------------- copy env 104 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 104 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend104
inc r11
ploop104:
 cmp r11, 0
 je pend104
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop104
pend104:
;---------------- make closure 104 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode104)
jmp Lcont104
Lcode104:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 106 ----------------
COPY_ENV 32 , 4
mov r15, r14
;---------------- copy args 106 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend106
inc r11
ploop106:
 cmp r11, 0
 je pend106
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop106
pend106:
;---------------- make closure 106 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode106)
jmp Lcont106
Lcode106:
 push rbp
 mov rbp, rsp
 ;------------- copy env 107 ----------------
COPY_ENV 40 , 5
mov r15, r14
;---------------- copy args 107 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend107
inc r11
ploop107:
 cmp r11, 0
 je pend107
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop107
pend107:
;---------------- make closure 107 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode107)
jmp Lcont107
Lcode107:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*3] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next114
mov rax, SOB_FALSE_ADDRESS
ret
next114:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse108 
 mov rax , const_tbl + 1
jmp Lexit108 
 
                              Lelse108: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*3] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next111
mov rax, SOB_FALSE_ADDRESS
ret
next111:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next110
mov rax, SOB_FALSE_ADDRESS
ret
next110:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*3] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next113
mov rax, SOB_FALSE_ADDRESS
ret
next113:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next112
mov rax, SOB_FALSE_ADDRESS
ret
next112:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*3] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next109
mov rax, SOB_FALSE_ADDRESS
ret
t_next109:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit108: 

 leave
 ret
Lcont107:
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
push rax 
push 1 
mov rax, qword [rbp + 8 * (4 + 0)] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next115
mov rax, SOB_FALSE_ADDRESS
ret
t_next115:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont106:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next105
mov rax, SOB_FALSE_ADDRESS
ret
t_next105:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont104:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next103
mov rax, SOB_FALSE_ADDRESS
ret
t_next103:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit87 
 
                              Lelse87: 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 2)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 2 
;------------- copy env 89 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 89 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend89
inc r11
ploop89:
 cmp r11, 0
 je pend89
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop89
pend89:
;---------------- make closure 89 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode89)
jmp Lcont89
Lcode89:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 91 ----------------
COPY_ENV 32 , 4
mov r15, r14
;---------------- copy args 91 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend91
inc r11
ploop91:
 cmp r11, 0
 je pend91
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop91
pend91:
;---------------- make closure 91 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode91)
jmp Lcont91
Lcode91:
 push rbp
 mov rbp, rsp
 ;------------- copy env 92 ----------------
COPY_ENV 40 , 5
mov r15, r14
;---------------- copy args 92 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend92
inc r11
ploop92:
 cmp r11, 0
 je pend92
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop92
pend92:
;---------------- make closure 92 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode92)
jmp Lcont92
Lcode92:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*3] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next101
mov rax, SOB_FALSE_ADDRESS
ret
next101:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse93 
 mov rax , const_tbl + 1
jmp Lexit93 
 
                              Lelse93: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*3] 
mov rax, qword [rax + 8*4] 
push rax 
push 2 
mov rax, qword [fvar_tbl + 216] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next96
mov rax, SOB_FALSE_ADDRESS
ret
next96:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*3] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next97
mov rax, SOB_FALSE_ADDRESS
ret
next97:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next95
mov rax, SOB_FALSE_ADDRESS
ret
next95:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*3] 
mov rax, qword [rax + 8*3] 
push rax 
push 2 
mov rax, qword [fvar_tbl + 216] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next99
mov rax, SOB_FALSE_ADDRESS
ret
next99:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*3] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next100
mov rax, SOB_FALSE_ADDRESS
ret
next100:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*0] 
push rax 
push 3 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*3] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next98
mov rax, SOB_FALSE_ADDRESS
ret
next98:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*3] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next94
mov rax, SOB_FALSE_ADDRESS
ret
t_next94:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit93: 

 leave
 ret
Lcont92:
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
push rax 
push 2 
mov rax, qword [rbp + 8 * (4 + 0)] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next102
mov rax, SOB_FALSE_ADDRESS
ret
t_next102:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont91:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next90
mov rax, SOB_FALSE_ADDRESS
ret
t_next90:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont89:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next88
mov rax, SOB_FALSE_ADDRESS
ret
t_next88:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit87: 

 leave
 ret
Lcont86:

 leave
 ret
Lcont85:
mov sil, [rax]
cmp sil, T_CLOSURE
je next84
mov rax, SOB_FALSE_ADDRESS
ret
next84:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 216], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 152] 
push rax 
mov rax, qword [fvar_tbl + 144] 
push rax 
mov rax, qword [fvar_tbl + 168] 
push rax 
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 136] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 7 
;------------- copy env 118 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 118 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend118
inc r11
ploop118:
 cmp r11, 0
 je pend118
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop118
pend118:
;---------------- make closure 118 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode118)
jmp Lcont118
Lcode118:
 push rbp
 mov rbp, rsp
 ;------------- copy env 119 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 119 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend119
inc r11
ploop119:
 cmp r11, 0
 je pend119
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop119
pend119:
;---------------- make closure 119 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode119)
jmp Lcont119
Lcode119:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 121 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 121 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend121
inc r11
ploop121:
 cmp r11, 0
 je pend121
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop121
pend121:
;---------------- make closure 121 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode121)
jmp Lcont121
Lcode121:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 0)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 122 ----------------
COPY_ENV 32 , 4
mov r15, r14
;---------------- copy args 122 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend122
inc r11
ploop122:
 cmp r11, 0
 je pend122
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop122
pend122:
;---------------- make closure 122 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode122)
jmp Lcont122
Lcode122:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next131
mov rax, SOB_FALSE_ADDRESS
ret
next131:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse123 
 mov rax, qword [rbp + 8 * (4 + 1)] 
jmp Lexit123 
 
                              Lelse123: 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next130
mov rax, SOB_FALSE_ADDRESS
ret
next130:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse124 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 2)] 
push rax 
mov rax , const_tbl + 41
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*6] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next126
mov rax, SOB_FALSE_ADDRESS
ret
next126:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next128
mov rax, SOB_FALSE_ADDRESS
ret
next128:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8 * (4 + 2)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 3 
mov rax, qword [fvar_tbl + 240] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next127
mov rax, SOB_FALSE_ADDRESS
ret
next127:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next129
mov rax, SOB_FALSE_ADDRESS
ret
next129:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 3 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next125
mov rax, SOB_FALSE_ADDRESS
ret
t_next125:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 3) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit124 
 
                              Lelse124: 
mov rax , const_tbl + 50
Lexit124: 
Lexit123: 

 leave
 ret
Lcont122:
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
pop qword [rax] 

                         mov rax, SOB_VOID_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 32
push rax 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*5] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next134
mov rax, SOB_FALSE_ADDRESS
ret
next134:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next133
mov rax, SOB_FALSE_ADDRESS
ret
next133:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
push rax 
push 3 
mov rax, qword [rbp + 8 * (4 + 0)] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next132
mov rax, SOB_FALSE_ADDRESS
ret
t_next132:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 3) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont121:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next120
mov rax, SOB_FALSE_ADDRESS
ret
t_next120:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont119:

 leave
 ret
Lcont118:
mov sil, [rax]
cmp sil, T_CLOSURE
je next117
mov rax, SOB_FALSE_ADDRESS
ret
next117:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 232], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 280] 
push rax 
mov rax, qword [fvar_tbl + 272] 
push rax 
mov rax, qword [fvar_tbl + 96] 
push rax 
mov rax, qword [fvar_tbl + 264] 
push rax 
mov rax, qword [fvar_tbl + 256] 
push rax 
push 5 
;------------- copy env 136 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 136 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend136
inc r11
ploop136:
 cmp r11, 0
 je pend136
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop136
pend136:
;---------------- make closure 136 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode136)
jmp Lcont136
Lcode136:
 push rbp
 mov rbp, rsp
 ;------------- copy env 137 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 137 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend137
inc r11
ploop137:
 cmp r11, 0
 je pend137
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop137
pend137:
;---------------- make closure 137 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode137)
jmp Lcont137
Lcode137:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 139 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 139 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend139
inc r11
ploop139:
 cmp r11, 0
 je pend139
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop139
pend139:
;---------------- make closure 139 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode139)
jmp Lcont139
Lcode139:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 0)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 140 ----------------
COPY_ENV 32 , 4
mov r15, r14
;---------------- copy args 140 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend140
inc r11
ploop140:
 cmp r11, 0
 je pend140
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop140
pend140:
;---------------- make closure 140 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode140)
jmp Lcont140
Lcode140:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 32
push rax 
mov rax, qword [rbp + 8 * (4 + 2)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next146
mov rax, SOB_FALSE_ADDRESS
ret
next146:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse141 
 mov rax, qword [rbp + 8 * (4 + 1)] 
jmp Lexit141 
 
                              Lelse141: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 41
push rax 
mov rax, qword [rbp + 8 * (4 + 2)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next143
mov rax, SOB_FALSE_ADDRESS
ret
next143:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 2)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next145
mov rax, SOB_FALSE_ADDRESS
ret
next145:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next144
mov rax, SOB_FALSE_ADDRESS
ret
next144:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 3 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next142
mov rax, SOB_FALSE_ADDRESS
ret
t_next142:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 3) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit141: 

 leave
 ret
Lcont140:
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
pop qword [rax] 

                         mov rax, SOB_VOID_ADDRESS
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 41
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next149
mov rax, SOB_FALSE_ADDRESS
ret
next149:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next148
mov rax, SOB_FALSE_ADDRESS
ret
next148:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax , const_tbl + 1
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
push rax 
push 3 
mov rax, qword [rbp + 8 * (4 + 0)] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next147
mov rax, SOB_FALSE_ADDRESS
ret
t_next147:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 3) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont139:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next138
mov rax, SOB_FALSE_ADDRESS
ret
t_next138:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont137:

 leave
 ret
Lcont136:
mov sil, [rax]
cmp sil, T_CLOSURE
je next135
mov rax, SOB_FALSE_ADDRESS
ret
next135:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 248], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 232] 
push rax 
push 1 
;------------- copy env 151 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 151 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend151
inc r11
ploop151:
 cmp r11, 0
 je pend151
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop151
pend151:
;---------------- make closure 151 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode151)
jmp Lcont151
Lcode151:
 push rbp
 mov rbp, rsp
 ;------------- copy env 152 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 152 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend152
inc r11
ploop152:
 cmp r11, 0
 je pend152
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop152
pend152:
;---------------- make closure 152 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode152)
jmp Lcont152
Lcode152:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8, [rbp + 8*3]
 mov r10, r8
 mov r11, 0
 sub r10, r11
 cmp r10, 0
 je end_opt152
mov qword [rbp + 8*3], 1
mov rax, r10
dec rax
mov rdx, 8
mul rdx
mov r15, rax
sub r15, 8
MALLOC r11, rax
add r11, r15
mov r12, r8
add r12, 3
mov rax, r12
mov rdx, 8
mul rdx
mov r12, rax
mov r13, rbp
add r13, r12
mov r9, r10
dec r9
opt_loop152:
 cmp r10, 0
 je opt_end_loop152
 mov r14, [r13]
 mov qword [r11], r14
 sub r13, 8
 sub r11, 8
 dec r10
 jmp opt_loop152
opt_end_loop152:
 add r11, 8
add r11, r15
MAKE_LIST r11 , r9
mov [rbp + 8*(3+1)], rdx
mov r11, r8
sub r11,1
add rbp, 8*(5 +0  )
SHIFT_FRAME (4+1) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt152:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next153
mov rax, SOB_FALSE_ADDRESS
ret
t_next153:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont152:

 leave
 ret
Lcont151:
mov sil, [rax]
cmp sil, T_CLOSURE
je next150
mov rax, SOB_FALSE_ADDRESS
ret
next150:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 288], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 224] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 152] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 5 
;------------- copy env 155 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 155 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend155
inc r11
ploop155:
 cmp r11, 0
 je pend155
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop155
pend155:
;---------------- make closure 155 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode155)
jmp Lcont155
Lcode155:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 157 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 157 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend157
inc r11
ploop157:
 cmp r11, 0
 je pend157
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop157
pend157:
;---------------- make closure 157 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode157)
jmp Lcont157
Lcode157:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 0)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 158 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 158 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend158
inc r11
ploop158:
 cmp r11, 0
 je pend158
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop158
pend158:
;---------------- make closure 158 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode158)
jmp Lcont158
Lcode158:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8, [rbp + 8*3]
 mov r10, r8
 mov r11, 0
 sub r10, r11
 cmp r10, 0
 je end_opt158
mov qword [rbp + 8*3], 1
mov rax, r10
dec rax
mov rdx, 8
mul rdx
mov r15, rax
sub r15, 8
MALLOC r11, rax
add r11, r15
mov r12, r8
add r12, 3
mov rax, r12
mov rdx, 8
mul rdx
mov r12, rax
mov r13, rbp
add r13, r12
mov r9, r10
dec r9
opt_loop158:
 cmp r10, 0
 je opt_end_loop158
 mov r14, [r13]
 mov qword [r11], r14
 sub r13, 8
 sub r11, 8
 dec r10
 jmp opt_loop158
opt_end_loop158:
 add r11, 8
add r11, r15
MAKE_LIST r11 , r9
mov [rbp + 8*(3+1)], rdx
mov r11, r8
sub r11,1
add rbp, 8*(5 +0  )
SHIFT_FRAME (4+1) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt158:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next164
mov rax, SOB_FALSE_ADDRESS
ret
next164:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse159 
 mov rax , const_tbl + 32
jmp Lexit159 
 
                              Lelse159: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next162
mov rax, SOB_FALSE_ADDRESS
ret
next162:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next161
mov rax, SOB_FALSE_ADDRESS
ret
next161:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next163
mov rax, SOB_FALSE_ADDRESS
ret
next163:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next160
mov rax, SOB_FALSE_ADDRESS
ret
t_next160:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit159: 

 leave
 ret
Lcont158:
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
pop qword [rax] 

                         mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
mov rax, qword [rax] 

 leave
 ret
Lcont157:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next156
mov rax, SOB_FALSE_ADDRESS
ret
t_next156:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont155:
mov sil, [rax]
cmp sil, T_CLOSURE
je next154
mov rax, SOB_FALSE_ADDRESS
ret
next154:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 152], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 224] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 296] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 5 
;------------- copy env 166 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 166 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend166
inc r11
ploop166:
 cmp r11, 0
 je pend166
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop166
pend166:
;---------------- make closure 166 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode166)
jmp Lcont166
Lcode166:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 168 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 168 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend168
inc r11
ploop168:
 cmp r11, 0
 je pend168
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop168
pend168:
;---------------- make closure 168 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode168)
jmp Lcont168
Lcode168:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 0)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 169 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 169 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend169
inc r11
ploop169:
 cmp r11, 0
 je pend169
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop169
pend169:
;---------------- make closure 169 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode169)
jmp Lcont169
Lcode169:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8, [rbp + 8*3]
 mov r10, r8
 mov r11, 0
 sub r10, r11
 cmp r10, 0
 je end_opt169
mov qword [rbp + 8*3], 1
mov rax, r10
dec rax
mov rdx, 8
mul rdx
mov r15, rax
sub r15, 8
MALLOC r11, rax
add r11, r15
mov r12, r8
add r12, 3
mov rax, r12
mov rdx, 8
mul rdx
mov r12, rax
mov r13, rbp
add r13, r12
mov r9, r10
dec r9
opt_loop169:
 cmp r10, 0
 je opt_end_loop169
 mov r14, [r13]
 mov qword [r11], r14
 sub r13, 8
 sub r11, 8
 dec r10
 jmp opt_loop169
opt_end_loop169:
 add r11, 8
add r11, r15
MAKE_LIST r11 , r9
mov [rbp + 8*(3+1)], rdx
mov r11, r8
sub r11,1
add rbp, 8*(5 +0  )
SHIFT_FRAME (4+1) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt169:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next175
mov rax, SOB_FALSE_ADDRESS
ret
next175:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse170 
 mov rax , const_tbl + 41
jmp Lexit170 
 
                              Lelse170: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next173
mov rax, SOB_FALSE_ADDRESS
ret
next173:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next172
mov rax, SOB_FALSE_ADDRESS
ret
next172:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next174
mov rax, SOB_FALSE_ADDRESS
ret
next174:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next171
mov rax, SOB_FALSE_ADDRESS
ret
t_next171:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit170: 

 leave
 ret
Lcont169:
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
pop qword [rax] 

                         mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
mov rax, qword [rax] 

 leave
 ret
Lcont168:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next167
mov rax, SOB_FALSE_ADDRESS
ret
t_next167:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont166:
mov sil, [rax]
cmp sil, T_CLOSURE
je next165
mov rax, SOB_FALSE_ADDRESS
ret
next165:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 296], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 144] 
push rax 
mov rax, qword [fvar_tbl + 224] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 152] 
push rax 
mov rax, qword [fvar_tbl + 280] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 7 
;------------- copy env 177 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 177 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend177
inc r11
ploop177:
 cmp r11, 0
 je pend177
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop177
pend177:
;---------------- make closure 177 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode177)
jmp Lcont177
Lcode177:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 179 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 179 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend179
inc r11
ploop179:
 cmp r11, 0
 je pend179
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop179
pend179:
;---------------- make closure 179 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode179)
jmp Lcont179
Lcode179:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 0)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 180 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 180 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend180
inc r11
ploop180:
 cmp r11, 0
 je pend180
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop180
pend180:
;---------------- make closure 180 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode180)
jmp Lcont180
Lcode180:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8, [rbp + 8*3]
 mov r10, r8
 mov r11, 0
 sub r10, r11
 cmp r10, 0
 je end_opt180
mov qword [rbp + 8*3], 1
mov rax, r10
dec rax
mov rdx, 8
mul rdx
mov r15, rax
sub r15, 8
MALLOC r11, rax
add r11, r15
mov r12, r8
add r12, 3
mov rax, r12
mov rdx, 8
mul rdx
mov r12, rax
mov r13, rbp
add r13, r12
mov r9, r10
dec r9
opt_loop180:
 cmp r10, 0
 je opt_end_loop180
 mov r14, [r13]
 mov qword [r11], r14
 sub r13, 8
 sub r11, 8
 dec r10
 jmp opt_loop180
opt_end_loop180:
 add r11, 8
add r11, r15
MAKE_LIST r11 , r9
mov [rbp + 8*(3+1)], rdx
mov r11, r8
sub r11,1
add rbp, 8*(5 +0  )
SHIFT_FRAME (4+1) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt180:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next186
mov rax, SOB_FALSE_ADDRESS
ret
next186:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse181 
 mov rax , const_tbl + 32
jmp Lexit181 
 
                              Lelse181: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next183
mov rax, SOB_FALSE_ADDRESS
ret
next183:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*6] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next185
mov rax, SOB_FALSE_ADDRESS
ret
next185:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next184
mov rax, SOB_FALSE_ADDRESS
ret
next184:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next182
mov rax, SOB_FALSE_ADDRESS
ret
t_next182:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit181: 

 leave
 ret
Lcont180:
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
pop qword [rax] 

                         mov rax, SOB_VOID_ADDRESS
;------------- copy env 187 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 187 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend187
inc r11
ploop187:
 cmp r11, 0
 je pend187
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop187
pend187:
;---------------- make closure 187 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode187)
jmp Lcont187
Lcode187:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8, [rbp + 8*3]
 mov r10, r8
 mov r11, 0
 sub r10, r11
 cmp r10, 0
 je end_opt187
mov qword [rbp + 8*3], 1
mov rax, r10
dec rax
mov rdx, 8
mul rdx
mov r15, rax
sub r15, 8
MALLOC r11, rax
add r11, r15
mov r12, r8
add r12, 3
mov rax, r12
mov rdx, 8
mul rdx
mov r12, rax
mov r13, rbp
add r13, r12
mov r9, r10
dec r9
opt_loop187:
 cmp r10, 0
 je opt_end_loop187
 mov r14, [r13]
 mov qword [r11], r14
 sub r13, 8
 sub r11, 8
 dec r10
 jmp opt_loop187
opt_end_loop187:
 add r11, 8
add r11, r15
MAKE_LIST r11 , r9
mov [rbp + 8*(3+1)], rdx
mov r11, r8
sub r11,1
add rbp, 8*(5 +0  )
SHIFT_FRAME (4+1) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt187:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next198
mov rax, SOB_FALSE_ADDRESS
ret
next198:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse188 
 mov rax , const_tbl + 50
jmp Lexit188 
 
                              Lelse188: 
push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 41
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*5] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next197
mov rax, SOB_FALSE_ADDRESS
ret
next197:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [fvar_tbl + 112] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next196
mov rax, SOB_FALSE_ADDRESS
ret
next196:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse189 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next195
mov rax, SOB_FALSE_ADDRESS
ret
next195:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax , const_tbl + 32
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next194
mov rax, SOB_FALSE_ADDRESS
ret
t_next194:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit189 
 
                              Lelse189: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*6] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next192
mov rax, SOB_FALSE_ADDRESS
ret
next192:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next191
mov rax, SOB_FALSE_ADDRESS
ret
next191:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next193
mov rax, SOB_FALSE_ADDRESS
ret
next193:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next190
mov rax, SOB_FALSE_ADDRESS
ret
t_next190:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit189: 
Lexit188: 

 leave
 ret
Lcont187:

 leave
 ret
Lcont179:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next178
mov rax, SOB_FALSE_ADDRESS
ret
t_next178:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont177:
mov sil, [rax]
cmp sil, T_CLOSURE
je next176
mov rax, SOB_FALSE_ADDRESS
ret
next176:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 280], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 144] 
push rax 
mov rax, qword [fvar_tbl + 224] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 296] 
push rax 
mov rax, qword [fvar_tbl + 304] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 7 
;------------- copy env 200 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 200 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend200
inc r11
ploop200:
 cmp r11, 0
 je pend200
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop200
pend200:
;---------------- make closure 200 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode200)
jmp Lcont200
Lcode200:
 push rbp
 mov rbp, rsp
 ;------------- copy env 201 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 201 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend201
inc r11
ploop201:
 cmp r11, 0
 je pend201
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop201
pend201:
;---------------- make closure 201 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode201)
jmp Lcont201
Lcode201:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8, [rbp + 8*3]
 mov r10, r8
 mov r11, 0
 sub r10, r11
 cmp r10, 0
 je end_opt201
mov qword [rbp + 8*3], 1
mov rax, r10
dec rax
mov rdx, 8
mul rdx
mov r15, rax
sub r15, 8
MALLOC r11, rax
add r11, r15
mov r12, r8
add r12, 3
mov rax, r12
mov rdx, 8
mul rdx
mov r12, rax
mov r13, rbp
add r13, r12
mov r9, r10
dec r9
opt_loop201:
 cmp r10, 0
 je opt_end_loop201
 mov r14, [r13]
 mov qword [r11], r14
 sub r13, 8
 sub r11, 8
 dec r10
 jmp opt_loop201
opt_end_loop201:
 add r11, 8
add r11, r15
MAKE_LIST r11 , r9
mov [rbp + 8*(3+1)], rdx
mov r11, r8
sub r11,1
add rbp, 8*(5 +0  )
SHIFT_FRAME (4+1) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt201:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next212
mov rax, SOB_FALSE_ADDRESS
ret
next212:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse202 
 mov rax , const_tbl + 50
jmp Lexit202 
 
                              Lelse202: 
push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 41
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*5] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next211
mov rax, SOB_FALSE_ADDRESS
ret
next211:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [fvar_tbl + 112] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next210
mov rax, SOB_FALSE_ADDRESS
ret
next210:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse203 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next209
mov rax, SOB_FALSE_ADDRESS
ret
next209:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax , const_tbl + 41
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next208
mov rax, SOB_FALSE_ADDRESS
ret
t_next208:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit203 
 
                              Lelse203: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*6] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next206
mov rax, SOB_FALSE_ADDRESS
ret
next206:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*2] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next205
mov rax, SOB_FALSE_ADDRESS
ret
next205:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next207
mov rax, SOB_FALSE_ADDRESS
ret
next207:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next204
mov rax, SOB_FALSE_ADDRESS
ret
t_next204:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit203: 
Lexit202: 

 leave
 ret
Lcont201:

 leave
 ret
Lcont200:
mov sil, [rax]
cmp sil, T_CLOSURE
je next199
mov rax, SOB_FALSE_ADDRESS
ret
next199:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 304], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 112] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 4 
;------------- copy env 214 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 214 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend214
inc r11
ploop214:
 cmp r11, 0
 je pend214
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop214
pend214:
;---------------- make closure 214 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode214)
jmp Lcont214
Lcode214:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 216 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 216 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend216
inc r11
ploop216:
 cmp r11, 0
 je pend216
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop216
pend216:
;---------------- make closure 216 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode216)
jmp Lcont216
Lcode216:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 0)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 217 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 217 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend217
inc r11
ploop217:
 cmp r11, 0
 je pend217
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop217
pend217:
;---------------- make closure 217 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode217)
jmp Lcont217
Lcode217:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next225
mov rax, SOB_FALSE_ADDRESS
ret
next225:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse218 
 mov rax , const_tbl + 4
jmp Lexit218 
 
                              Lelse218: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next224
mov rax, SOB_FALSE_ADDRESS
ret
next224:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next223
mov rax, SOB_FALSE_ADDRESS
ret
next223:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse219 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next221
mov rax, SOB_FALSE_ADDRESS
ret
next221:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next222
mov rax, SOB_FALSE_ADDRESS
ret
next222:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next220
mov rax, SOB_FALSE_ADDRESS
ret
t_next220:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit219 
 
                              Lelse219: 
mov rax , const_tbl + 2
Lexit219: 
Lexit218: 

 leave
 ret
Lcont217:
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
pop qword [rax] 

                         mov rax, SOB_VOID_ADDRESS
;------------- copy env 226 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 226 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend226
inc r11
ploop226:
 cmp r11, 0
 je pend226
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop226
pend226:
;---------------- make closure 226 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode226)
jmp Lcont226
Lcode226:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8, [rbp + 8*3]
 mov r10, r8
 mov r11, 0
 sub r10, r11
 cmp r10, 0
 je end_opt226
mov qword [rbp + 8*3], 1
mov rax, r10
dec rax
mov rdx, 8
mul rdx
mov r15, rax
sub r15, 8
MALLOC r11, rax
add r11, r15
mov r12, r8
add r12, 3
mov rax, r12
mov rdx, 8
mul rdx
mov r12, rax
mov r13, rbp
add r13, r12
mov r9, r10
dec r9
opt_loop226:
 cmp r10, 0
 je opt_end_loop226
 mov r14, [r13]
 mov qword [r11], r14
 sub r13, 8
 sub r11, 8
 dec r10
 jmp opt_loop226
opt_end_loop226:
 add r11, 8
add r11, r15
MAKE_LIST r11 , r9
mov [rbp + 8*(3+1)], rdx
mov r11, r8
sub r11,1
add rbp, 8*(5 +0  )
SHIFT_FRAME (4+1) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt226:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next231
mov rax, SOB_FALSE_ADDRESS
ret
next231:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse227 
 mov rax , const_tbl + 50
jmp Lexit227 
 
                              Lelse227: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next229
mov rax, SOB_FALSE_ADDRESS
ret
next229:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next230
mov rax, SOB_FALSE_ADDRESS
ret
next230:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next228
mov rax, SOB_FALSE_ADDRESS
ret
t_next228:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit227: 

 leave
 ret
Lcont226:

 leave
 ret
Lcont216:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next215
mov rax, SOB_FALSE_ADDRESS
ret
t_next215:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont214:
mov sil, [rax]
cmp sil, T_CLOSURE
je next213
mov rax, SOB_FALSE_ADDRESS
ret
next213:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 112], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 256] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 4 
;------------- copy env 233 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 233 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend233
inc r11
ploop233:
 cmp r11, 0
 je pend233
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop233
pend233:
;---------------- make closure 233 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode233)
jmp Lcont233
Lcode233:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 235 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 235 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend235
inc r11
ploop235:
 cmp r11, 0
 je pend235
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop235
pend235:
;---------------- make closure 235 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode235)
jmp Lcont235
Lcode235:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 0)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 236 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 236 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend236
inc r11
ploop236:
 cmp r11, 0
 je pend236
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop236
pend236:
;---------------- make closure 236 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode236)
jmp Lcont236
Lcode236:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next244
mov rax, SOB_FALSE_ADDRESS
ret
next244:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse237 
 mov rax , const_tbl + 4
jmp Lexit237 
 
                              Lelse237: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next243
mov rax, SOB_FALSE_ADDRESS
ret
next243:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next242
mov rax, SOB_FALSE_ADDRESS
ret
next242:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse238 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next240
mov rax, SOB_FALSE_ADDRESS
ret
next240:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next241
mov rax, SOB_FALSE_ADDRESS
ret
next241:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next239
mov rax, SOB_FALSE_ADDRESS
ret
t_next239:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit238 
 
                              Lelse238: 
mov rax , const_tbl + 2
Lexit238: 
Lexit237: 

 leave
 ret
Lcont236:
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
pop qword [rax] 

                         mov rax, SOB_VOID_ADDRESS
;------------- copy env 245 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 245 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend245
inc r11
ploop245:
 cmp r11, 0
 je pend245
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop245
pend245:
;---------------- make closure 245 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode245)
jmp Lcont245
Lcode245:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8, [rbp + 8*3]
 mov r10, r8
 mov r11, 0
 sub r10, r11
 cmp r10, 0
 je end_opt245
mov qword [rbp + 8*3], 1
mov rax, r10
dec rax
mov rdx, 8
mul rdx
mov r15, rax
sub r15, 8
MALLOC r11, rax
add r11, r15
mov r12, r8
add r12, 3
mov rax, r12
mov rdx, 8
mul rdx
mov r12, rax
mov r13, rbp
add r13, r12
mov r9, r10
dec r9
opt_loop245:
 cmp r10, 0
 je opt_end_loop245
 mov r14, [r13]
 mov qword [r11], r14
 sub r13, 8
 sub r11, 8
 dec r10
 jmp opt_loop245
opt_end_loop245:
 add r11, 8
add r11, r15
MAKE_LIST r11 , r9
mov [rbp + 8*(3+1)], rdx
mov r11, r8
sub r11,1
add rbp, 8*(5 +0  )
SHIFT_FRAME (4+1) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt245:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next250
mov rax, SOB_FALSE_ADDRESS
ret
next250:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse246 
 mov rax , const_tbl + 50
jmp Lexit246 
 
                              Lelse246: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next248
mov rax, SOB_FALSE_ADDRESS
ret
next248:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next249
mov rax, SOB_FALSE_ADDRESS
ret
next249:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next247
mov rax, SOB_FALSE_ADDRESS
ret
t_next247:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit246: 

 leave
 ret
Lcont245:

 leave
 ret
Lcont235:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next234
mov rax, SOB_FALSE_ADDRESS
ret
t_next234:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont233:
mov sil, [rax]
cmp sil, T_CLOSURE
je next232
mov rax, SOB_FALSE_ADDRESS
ret
next232:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 256], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 176] 
push rax 
mov rax, qword [fvar_tbl + 112] 
push rax 
mov rax, qword [fvar_tbl + 256] 
push rax 
mov rax, qword [fvar_tbl + 72] 
push rax 
push 6 
;------------- copy env 252 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 252 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend252
inc r11
ploop252:
 cmp r11, 0
 je pend252
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop252
pend252:
;---------------- make closure 252 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode252)
jmp Lcont252
Lcode252:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 254 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 254 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend254
inc r11
ploop254:
 cmp r11, 0
 je pend254
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop254
pend254:
;---------------- make closure 254 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode254)
jmp Lcont254
Lcode254:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 0)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 255 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 255 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend255
inc r11
ploop255:
 cmp r11, 0
 je pend255
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop255
pend255:
;---------------- make closure 255 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode255)
jmp Lcont255
Lcode255:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next267
mov rax, SOB_FALSE_ADDRESS
ret
next267:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse256 
 mov rax , const_tbl + 4
jmp Lexit256 
 
                              Lelse256: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next266
mov rax, SOB_FALSE_ADDRESS
ret
next266:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next265
mov rax, SOB_FALSE_ADDRESS
ret
next265:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
 jne orLexit262 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next264
mov rax, SOB_FALSE_ADDRESS
ret
next264:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next263
mov rax, SOB_FALSE_ADDRESS
ret
next263:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
orLexit262: 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next261
mov rax, SOB_FALSE_ADDRESS
ret
next261:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse257 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*5] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next259
mov rax, SOB_FALSE_ADDRESS
ret
next259:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next260
mov rax, SOB_FALSE_ADDRESS
ret
next260:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next258
mov rax, SOB_FALSE_ADDRESS
ret
t_next258:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit257 
 
                              Lelse257: 
mov rax , const_tbl + 2
Lexit257: 
Lexit256: 

 leave
 ret
Lcont255:
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
pop qword [rax] 

                         mov rax, SOB_VOID_ADDRESS
;------------- copy env 268 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 268 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend268
inc r11
ploop268:
 cmp r11, 0
 je pend268
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop268
pend268:
;---------------- make closure 268 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode268)
jmp Lcont268
Lcode268:
 push rbp
 mov rbp, rsp
;------ opt ----------------- 
 mov r8, [rbp + 8*3]
 mov r10, r8
 mov r11, 0
 sub r10, r11
 cmp r10, 0
 je end_opt268
mov qword [rbp + 8*3], 1
mov rax, r10
dec rax
mov rdx, 8
mul rdx
mov r15, rax
sub r15, 8
MALLOC r11, rax
add r11, r15
mov r12, r8
add r12, 3
mov rax, r12
mov rdx, 8
mul rdx
mov r12, rax
mov r13, rbp
add r13, r12
mov r9, r10
dec r9
opt_loop268:
 cmp r10, 0
 je opt_end_loop268
 mov r14, [r13]
 mov qword [r11], r14
 sub r13, 8
 sub r11, 8
 dec r10
 jmp opt_loop268
opt_end_loop268:
 add r11, 8
add r11, r15
MAKE_LIST r11 , r9
mov [rbp + 8*(3+1)], rdx
mov r11, r8
sub r11,1
add rbp, 8*(5 +0  )
SHIFT_FRAME (4+1) , r11
mov rax, r11
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
;------ end opt ------------- 
 end_opt268:
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next273
mov rax, SOB_FALSE_ADDRESS
ret
next273:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse269 
 mov rax , const_tbl + 50
jmp Lexit269 
 
                              Lelse269: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*5] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next271
mov rax, SOB_FALSE_ADDRESS
ret
next271:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*4] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next272
mov rax, SOB_FALSE_ADDRESS
ret
next272:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next270
mov rax, SOB_FALSE_ADDRESS
ret
t_next270:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit269: 

 leave
 ret
Lcont268:

 leave
 ret
Lcont254:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next253
mov rax, SOB_FALSE_ADDRESS
ret
t_next253:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont252:
mov sil, [rax]
cmp sil, T_CLOSURE
je next251
mov rax, SOB_FALSE_ADDRESS
ret
next251:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 312], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax, qword [fvar_tbl + 280] 
push rax 
mov rax, qword [fvar_tbl + 368] 
push rax 
mov rax, qword [fvar_tbl + 88] 
push rax 
mov rax, qword [fvar_tbl + 80] 
push rax 
mov rax, qword [fvar_tbl + 184] 
push rax 
mov rax, qword [fvar_tbl + 360] 
push rax 
mov rax, qword [fvar_tbl + 352] 
push rax 
mov rax, qword [fvar_tbl + 344] 
push rax 
mov rax, qword [fvar_tbl + 136] 
push rax 
mov rax, qword [fvar_tbl + 200] 
push rax 
mov rax, qword [fvar_tbl + 208] 
push rax 
mov rax, qword [fvar_tbl + 272] 
push rax 
mov rax, qword [fvar_tbl + 264] 
push rax 
mov rax, qword [fvar_tbl + 336] 
push rax 
mov rax, qword [fvar_tbl + 328] 
push rax 
mov rax, qword [fvar_tbl + 176] 
push rax 
mov rax, qword [fvar_tbl + 112] 
push rax 
mov rax, qword [fvar_tbl + 256] 
push rax 
push 18 
;------------- copy env 275 ----------------
COPY_ENV 8 , 1
mov r15, r14
;---------------- copy args 275 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend275
inc r11
ploop275:
 cmp r11, 0
 je pend275
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop275
pend275:
;---------------- make closure 275 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode275)
jmp Lcont275
Lcode275:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
;------------- copy env 319 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 319 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend319
inc r11
ploop319:
 cmp r11, 0
 je pend319
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop319
pend319:
;---------------- make closure 319 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode319)
jmp Lcont319
Lcode319:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 23
push rax 
push 1 
;------------- copy env 321 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 321 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend321
inc r11
ploop321:
 cmp r11, 0
 je pend321
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop321
pend321:
;---------------- make closure 321 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode321)
jmp Lcont321
Lcode321:
 push rbp
 mov rbp, rsp
 MALLOC rsi , 8
mov rax, qword [rbp + 8 * (4 + 0)] 
mov [rsi], rax
mov rax, rsi
mov qword [rbp + 8*( 4 + 0)] , rax 
mov rax, SOB_VOID_ADDRESS 
;------------- copy env 322 ----------------
COPY_ENV 32 , 4
mov r15, r14
;---------------- copy args 322 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend322
inc r11
ploop322:
 cmp r11, 0
 je pend322
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop322
pend322:
;---------------- make closure 322 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode322)
jmp Lcont322
Lcode322:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 32
push rax 
mov rax, qword [rbp + 8 * (4 + 3)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next330
mov rax, SOB_FALSE_ADDRESS
ret
next330:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse323 
 mov rax , const_tbl + 4
jmp Lexit323 
 
                              Lelse323: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 3)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 2 
mov rax, qword [rbp + 8 * (4 + 2)] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next328
mov rax, SOB_FALSE_ADDRESS
ret
next328:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 3)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8 * (4 + 2)] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next329
mov rax, SOB_FALSE_ADDRESS
ret
next329:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [fvar_tbl + 320] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next327
mov rax, SOB_FALSE_ADDRESS
ret
next327:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse324 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 41
push rax 
mov rax, qword [rbp + 8 * (4 + 3)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*2] 
mov rax, qword [rax + 8*17] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next326
mov rax, SOB_FALSE_ADDRESS
ret
next326:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8 * (4 + 2)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 4 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next325
mov rax, SOB_FALSE_ADDRESS
ret
t_next325:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 4) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
jmp Lexit324 
 
                              Lelse324: 
mov rax , const_tbl + 2
Lexit324: 
Lexit323: 

 leave
 ret
Lcont322:
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
pop qword [rax] 

                         mov rax, SOB_VOID_ADDRESS
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next337
mov rax, SOB_FALSE_ADDRESS
ret
next337:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next338
mov rax, SOB_FALSE_ADDRESS
ret
next338:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next336
mov rax, SOB_FALSE_ADDRESS
ret
next336:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*2] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next335
mov rax, SOB_FALSE_ADDRESS
ret
next335:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse331 
 mov rax , const_tbl + 2
jmp Lexit331 
 
                              Lelse331: 
push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 41
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*3] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next334
mov rax, SOB_FALSE_ADDRESS
ret
next334:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*17] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next333
mov rax, SOB_FALSE_ADDRESS
ret
next333:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*2] 
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*1] 
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
push rax 
push 4 
mov rax, qword [rbp + 8 * (4 + 0)] 
mov rax, qword [rax] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next332
mov rax, SOB_FALSE_ADDRESS
ret
t_next332:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 4) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
Lexit331: 

 leave
 ret
Lcont321:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next320
mov rax, SOB_FALSE_ADDRESS
ret
t_next320:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont319:
push rax 
push 1 
;------------- copy env 277 ----------------
COPY_ENV 16 , 2
mov r15, r14
;---------------- copy args 277 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend277
inc r11
ploop277:
 cmp r11, 0
 je pend277
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop277
pend277:
;---------------- make closure 277 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode277)
jmp Lcont277
Lcode277:
 push rbp
 mov rbp, rsp
 ;------------- copy env 278 ----------------
COPY_ENV 24 , 3
mov r15, r14
;---------------- copy args 278 ----------------
mov r11, qword [rbp + 8*3]
inc r11
mov rax, r11
mov rdx, 8
mul rdx
mov r11, rax
MALLOC r13, r11
mov [r15], r13
mov r10, rbp
mov r12, 8*4
add r10, r12
mov r11, qword [rbp + 8*3]
 cmp r11, 0
 je pend278
inc r11
ploop278:
 cmp r11, 0
 je pend278
 mov r14, [r10]
 mov [r13], r14
 add r10, 8
 add r13, 8
 dec r11
 jmp ploop278
pend278:
;---------------- make closure 278 ----------------
mov r12, r15
MAKE_CLOSURE(rax , r12 , Lcode278)
jmp Lcont278
Lcode278:
 push rbp
 mov rbp, rsp
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*7] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next285
mov rax, SOB_FALSE_ADDRESS
ret
next285:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse281 
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*7] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next284
mov rax, SOB_FALSE_ADDRESS
ret
next284:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse282 
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next283
mov rax, SOB_FALSE_ADDRESS
ret
next283:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit282 
 
                              Lelse282: 
mov rax , const_tbl + 2
Lexit282: 
jmp Lexit281 
 
                              Lelse281: 
mov rax , const_tbl + 2
Lexit281: 
cmp rax, SOB_FALSE_ADDRESS 
 jne orLexit279 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*8] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next290
mov rax, SOB_FALSE_ADDRESS
ret
next290:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse286 
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*8] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next289
mov rax, SOB_FALSE_ADDRESS
ret
next289:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse287 
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next288
mov rax, SOB_FALSE_ADDRESS
ret
next288:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit287 
 
                              Lelse287: 
mov rax , const_tbl + 2
Lexit287: 
jmp Lexit286 
 
                              Lelse286: 
mov rax , const_tbl + 2
Lexit286: 
cmp rax, SOB_FALSE_ADDRESS 
 jne orLexit279 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*9] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next301
mov rax, SOB_FALSE_ADDRESS
ret
next301:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse291 
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*9] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next300
mov rax, SOB_FALSE_ADDRESS
ret
next300:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse292 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*14] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next298
mov rax, SOB_FALSE_ADDRESS
ret
next298:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*14] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next299
mov rax, SOB_FALSE_ADDRESS
ret
next299:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [fvar_tbl + 320] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next297
mov rax, SOB_FALSE_ADDRESS
ret
next297:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse293 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*15] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next295
mov rax, SOB_FALSE_ADDRESS
ret
next295:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*15] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next296
mov rax, SOB_FALSE_ADDRESS
ret
next296:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [fvar_tbl + 320] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next294
mov rax, SOB_FALSE_ADDRESS
ret
next294:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit293 
 
                              Lelse293: 
mov rax , const_tbl + 2
Lexit293: 
jmp Lexit292 
 
                              Lelse292: 
mov rax , const_tbl + 2
Lexit292: 
jmp Lexit291 
 
                              Lelse291: 
mov rax , const_tbl + 2
Lexit291: 
cmp rax, SOB_FALSE_ADDRESS 
 jne orLexit279 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*10] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next308
mov rax, SOB_FALSE_ADDRESS
ret
next308:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse302 
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*10] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next307
mov rax, SOB_FALSE_ADDRESS
ret
next307:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse303 
 push qword SOB_NIL_ADDRESS
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*16] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next305
mov rax, SOB_FALSE_ADDRESS
ret
next305:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*16] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next306
mov rax, SOB_FALSE_ADDRESS
ret
next306:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*1] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next304
mov rax, SOB_FALSE_ADDRESS
ret
next304:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit303 
 
                              Lelse303: 
mov rax , const_tbl + 2
Lexit303: 
jmp Lexit302 
 
                              Lelse302: 
mov rax , const_tbl + 2
Lexit302: 
cmp rax, SOB_FALSE_ADDRESS 
 jne orLexit279 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*11] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next313
mov rax, SOB_FALSE_ADDRESS
ret
next313:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse309 
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*11] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next312
mov rax, SOB_FALSE_ADDRESS
ret
next312:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse310 
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*3] 
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*4] 
push rax 
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 4 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next311
mov rax, SOB_FALSE_ADDRESS
ret
next311:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit310 
 
                              Lelse310: 
mov rax , const_tbl + 2
Lexit310: 
jmp Lexit309 
 
                              Lelse309: 
mov rax , const_tbl + 2
Lexit309: 
cmp rax, SOB_FALSE_ADDRESS 
 jne orLexit279 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*12] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next318
mov rax, SOB_FALSE_ADDRESS
ret
next318:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse314 
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
push 1 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*12] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next317
mov rax, SOB_FALSE_ADDRESS
ret
next317:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
cmp rax, SOB_FALSE_ADDRESS 
je Lelse315 
 push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*6] 
push rax 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*5] 
push rax 
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 4 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*0] 
mov rax, qword [rax + 8*0] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next316
mov rax, SOB_FALSE_ADDRESS
ret
next316:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
jmp Lexit315 
 
                              Lelse315: 
mov rax , const_tbl + 2
Lexit315: 
jmp Lexit314 
 
                              Lelse314: 
mov rax , const_tbl + 2
Lexit314: 
cmp rax, SOB_FALSE_ADDRESS 
 jne orLexit279 
push qword SOB_NIL_ADDRESS
mov rax, qword [rbp + 8 * (4 + 1)] 
push rax 
mov rax, qword [rbp + 8 * (4 + 0)] 
push rax 
push 2 
mov rax, qword [rbp + 8*2] 
mov rax, qword [rax + 8*1] 
mov rax, qword [rax + 8*13] 
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next280
mov rax, SOB_FALSE_ADDRESS
ret
t_next280:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 2) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11
orLexit279: 

 leave
 ret
Lcont278:

 leave
 ret
Lcont277:
mov sil, [rax]
cmp sil, T_CLOSURE
je t_next276
mov rax, SOB_FALSE_ADDRESS
ret
t_next276:
push qword [rax + 1]
push qword [rbp + 8 * 1]
mov r10, [rbp + 8*3]
add r10, 5
mov r15, qword [rbp]
SHIFT_FRAME (5 + 1) , r10
mov rdi , rax
mov rax, r10
mov rdx, 8
mul rdx
add rsp, rax
mov rbp, rsp
mov rax, rdi
CLOSURE_CODE r11 , rax
mov rbp, r15
jmp r11

 leave
 ret
Lcont275:
mov sil, [rax]
cmp sil, T_CLOSURE
je next274
mov rax, SOB_FALSE_ADDRESS
ret
next274:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx
mov qword [fvar_tbl + 320], rax 
mov rax, SOB_VOID_ADDRESS 

    call write_sob_if_not_void

push qword SOB_NIL_ADDRESS
mov rax , const_tbl + 41
push rax 
mov rax , const_tbl + 118
push rax 
push 2 
mov rax, qword [fvar_tbl + 280] 
mov sil, [rax]
cmp sil, T_CLOSURE
je next339
mov rax, SOB_FALSE_ADDRESS
ret
next339:
push qword [rax + 1]
call [rax + 9]
add rsp, 8*1 
pop rbx
inc rbx
shl rbx, 3
add rsp, rbx

    call write_sob_if_not_void
 add rsp, 4*8
 pop rbp
 ret
apply:
    push rbp
    mov r15, rbp
    mov rbp, rsp

    mov r8, [rbp + 8*3]  ; size of args
    mov r9, [rbp + 8*(3 + r8)] ; get list

    mov rdx, 0   ; counter
    mov rdi, rdx 
    push SOB_NIL_ADDRESS ; magic
    cmp r9, SOB_NIL_ADDRESS
    je .end_swap

   
    .loop:
        inc rdx
        CAR r10, r9
        push r10

        CDR r11, r9
        mov r9, r11

        cmp r9, SOB_NIL_ADDRESS
        jne .loop
    .end:
    mov rdi, rdx   ; backup list size

    mov r8, rsp
    mov r9, rbp
    sub r9, 16 

    .swap:
        cmp r8, r9
        jge .end_swap

        mov r10,  [r8]
        mov r11,  [r9]
        mov [r8], r11
        mov [r9], r10
        
        add r8, 8
        sub r9, 8

        jmp .swap
    .end_swap:

    mov rdx, [rbp + 3*8]
    sub rdx, 1

    .args:
        push qword [rbp + 8*(3 + rdx)]
        dec rdx
        cmp rdx, 0
        jne .args
    .end_args:

    pop r8   ; function
    mov r9, [rbp + 8*3]
    sub r9, 2
    add r9, rdi

    push r9  ; push new size
    CLOSURE_CODE r11 , r8
    CLOSURE_ENV r12 , r8
    push r12
    push qword [rbp + 1*8]
    
    add r9, 5
    mov r10, [rbp + 3*8]
    add r10, 5

    APPLY_SHIFT_FRAME r9 , r10 

    mov rbp, r15
    
    mov rax, 8
    mul r10
    add rsp, rax

    jmp r11

cons:
    push rbp
    mov rbp, rsp
    
    mov rdi, PVAR(0)
    mov rsi, PVAR(1)
    MAKE_PAIR (rax, rdi, rsi)

    leave
    ret

car:
    push rbp
    mov rbp, rsp

    mov rdi, PVAR(0)
    CAR rax, rdi

    leave
    ret

cdr:
    push rbp
    mov rbp, rsp

    mov rdi, PVAR(0)
    CDR rax, rdi

    leave
    ret

set_car:
    push rbp
    mov rbp, rsp

    mov rdi, [rbp + 8*4]
    mov rsi, [rbp + 8*5]
    mov qword [rdi+ 8], rdi
    mov rax, SOB_VOID_ADDRESS
    
    leave
    ret

set_cdr:
    push rbp
    mov rbp, rsp

    mov rdi, [rbp + 8*4]
    mov rsi, [rbp+ 8*5]
 
    mov qword [rdi + 9], rsi
    mov rax, SOB_VOID_ADDRESS

    leave
    ret  







is_boolean:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_BOOL
    jne .wrong_type
    mov rax, sob_true
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_float:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_FLOAT
    jne .wrong_type
    mov rax, sob_true
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_integer:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_INTEGER
    jne .wrong_type
    mov rax, sob_true
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_pair:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_PAIR
    jne .wrong_type
    mov rax, sob_true
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_null:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_NIL
    jne .wrong_type
    mov rax, sob_true
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_char:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_CHAR
    jne .wrong_type
    mov rax, sob_true
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_vector:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_VECTOR
    jne .wrong_type
    mov rax, sob_true
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_string:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_STRING
    jne .wrong_type
    mov rax, sob_true
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_procedure:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_CLOSURE
    jne .wrong_type
    mov rax, sob_true
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_symbol:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_SYMBOL
    jne .wrong_type
    mov rax, sob_true
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

string_length:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    STRING_LENGTH rsi, rsi
    MAKE_INT(rax, rsi)

    leave
    ret

string_ref:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0) 
    STRING_ELEMENTS rsi, rsi
    mov rdi, PVAR(1)
    INT_VAL rdi, rdi
    shl rdi, 0
    add rsi, rdi

    mov sil, byte [rsi]
    MAKE_CHAR(rax, sil)

    leave
    ret

string_set:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0) 
    STRING_ELEMENTS rsi, rsi
    mov rdi, PVAR(1)
    INT_VAL rdi, rdi
    shl rdi, 0
    add rsi, rdi

    mov rax, PVAR(2)
    CHAR_VAL rax, rax
    mov byte [rsi], al
    mov rax, SOB_VOID_ADDRESS

    leave
    ret

make_string:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    mov rdi, PVAR(1)
    CHAR_VAL rdi, rdi
    and rdi, 255

    MAKE_STRING rax, rsi, dil

    leave
    ret

vector_length:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    VECTOR_LENGTH rsi, rsi
    MAKE_INT(rax, rsi)

    leave
    ret

vector_ref:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0) 
    VECTOR_ELEMENTS rsi, rsi
    mov rdi, PVAR(1)
    INT_VAL rdi, rdi
    shl rdi, 3
    add rsi, rdi

    mov rax, [rsi]

    leave
    ret

vector_set:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0) 
    VECTOR_ELEMENTS rsi, rsi
    mov rdi, PVAR(1)
    INT_VAL rdi, rdi
    shl rdi, 3
    add rsi, rdi

    mov rdi, PVAR(2)
    mov [rsi], rdi
    mov rax, SOB_VOID_ADDRESS

    leave
    ret

make_vector:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    mov rdi, PVAR(1)
    

    MAKE_VECTOR rax, rsi, rdi

    leave
    ret

symbol_to_string:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    SYMBOL_VAL rsi, rsi
    
    STRING_LENGTH rcx, rsi
    STRING_ELEMENTS rdi, rsi

    push rcx
    push rdi

    mov dil, byte [rdi]
    MAKE_CHAR(rax, dil)
    push rax
    MAKE_INT(rax, rcx)
    push rax
    push 2
    push SOB_NIL_ADDRESS
    call make_string
    add rsp, 4*8

    STRING_ELEMENTS rsi, rax

    pop rdi
    pop rcx

.loop:
    cmp rcx, 0
    je .end
    lea r8, [rdi+rcx]
    lea r9, [rsi+rcx]

    mov bl, byte [r8]
    mov byte [r9], bl
    
    dec rcx
.end:

    leave
    ret

char_to_integer:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    CHAR_VAL rsi, rsi
    and rsi, 255
    MAKE_INT(rax, rsi)

    leave
    ret

integer_to_char:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    and rsi, 255
    MAKE_CHAR(rax, sil)

    leave
    ret

is_eq:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    mov rdi, PVAR(1)
    cmp rsi, rdi
    je .true
    mov rax, SOB_FALSE_ADDRESS
    jmp .return

.true:
    mov rax, SOB_TRUE_ADDRESS

.return:
    leave
    ret

bin_add:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    addsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_mul:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    mulsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_sub:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    subsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_div:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    divsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_lt:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    cmpltsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    INT_VAL rsi, rax
    cmp rsi, 0
    je .return_false
    mov rax, SOB_TRUE_ADDRESS
    jmp .final_return

.return_false:
    mov rax, SOB_FALSE_ADDRESS

.final_return:


    leave
    ret

bin_equ:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    cmpeqsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    INT_VAL rsi, rax
    cmp rsi, 0
    je .return_false
    mov rax, SOB_TRUE_ADDRESS
    jmp .final_return

.return_false:
    mov rax, SOB_FALSE_ADDRESS

.final_return:


    leave
    ret

